unit TestAdapterMongoDB;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Core.Interfaces, bsonDoc, Generics.Collections, mongoWire, Core.Base,
  SysUtils, Mapping.Attributes, SQL.Params, Adapters.MongoDB, mongoId;

type
  // Test methods for class TMongoResultSetAdapter

  TestTMongoResultSetAdapter = class(TTestCase)
  private
    FConnection: TMongoDBConnection;
    FQuery: TMongoDBQuery;
    FMongoResultSetAdapter: TMongoResultSetAdapter;
  protected
    procedure FetchValue(const AValue: Variant);
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestIsEmpty;
    procedure TestNext;
    procedure TestGetFieldValue;
    procedure TestGetFieldValue1;
    procedure TestGetFieldCount;
    procedure TestGetFieldName;
  end;
  // Test methods for class TMongoStatementAdapter

  TestTMongoStatementAdapter = class(TTestCase)
  private
    FConnection: TMongoDBConnection;
    FQuery: TMongoDBQuery;
    FMongoStatementAdapter: TMongoStatementAdapter;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestSetSQLCommand;
    procedure TestSetParams;
    procedure TestExecute;
    procedure TestExecuteQuery;
  end;
  // Test methods for class TMongoConnectionAdapter

  TestTMongoConnectionAdapter = class(TTestCase)
  private
    FConnection: TMongoDBConnection;
    FMongoConnectionAdapter: TMongoConnectionAdapter;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestConnect;
    procedure TestDisconnect;
    procedure TestIsConnected;
    procedure TestCreateStatement;
    procedure TestBeginTransaction;
    procedure TestGetDriverName;
  end;

implementation

const
  CT_KEY = 'KEY';
  NAME_COLLECTION = 'UnitTests.MongoAdapter';



procedure InsertObject(AConnection: TMongoDBConnection; const AValue: Variant);
begin

  AConnection.Insert(NAME_COLLECTION, BSON([CT_KEY, AValue]));
end;

procedure RemoveObject(AConnection: TMongoDBConnection; const AValue: Variant);
begin
  AConnection.Delete(NAME_COLLECTION, BSON([CT_KEY, AValue]));
end;

procedure TestTMongoResultSetAdapter.FetchValue(const AValue: Variant);
var
  LDoc: IBSONDocument;
begin
  LDoc := BSON([CT_KEY, AValue]);
  FMongoResultSetAdapter.Document := LDoc;
  FQuery.Query(NAME_COLLECTION, FMongoResultSetAdapter.Document);
  FMongoResultSetAdapter.Next;
end;

procedure TestTMongoResultSetAdapter.SetUp;
begin
  FConnection := TMongoDBConnection.Create;
  FConnection.Open();
  FQuery := TMongoDBQuery.Create(FConnection);
  FMongoResultSetAdapter := TMongoResultSetAdapter.Create(FQuery);
end;

procedure TestTMongoResultSetAdapter.TearDown;
begin
  FMongoResultSetAdapter.Free;
  FMongoResultSetAdapter := nil;
  FConnection.Free;
end;

procedure TestTMongoResultSetAdapter.TestIsEmpty;
var
  ReturnValue: Boolean;
begin
  CheckTrue(FMongoResultSetAdapter.IsEmpty);
  InsertObject(FConnection, 10);
  try
    FetchValue(10);
    CheckFalse(FMongoResultSetAdapter.IsEmpty);
  finally
    RemoveObject(FConnection, 10);
  end;
end;

procedure TestTMongoResultSetAdapter.TestNext;
begin
  CheckTrue(FMongoResultSetAdapter.Next);
end;

procedure TestTMongoResultSetAdapter.TestGetFieldValue;
var
  ReturnValue: Variant;
  iValue: Integer;
begin
  iValue := Random(1000000);
  InsertObject(FConnection, iValue);
  try
    FetchValue(iValue);
    ReturnValue := FMongoResultSetAdapter.GetFieldValue(0);
    CheckEquals(iValue, Integer(ReturnValue));
  finally
    RemoveObject(FConnection, iValue);
  end;
end;

procedure TestTMongoResultSetAdapter.TestGetFieldValue1;
var
  ReturnValue: Variant;
  iValue: Integer;
begin
  iValue := Random(1000000);
  InsertObject(FConnection, iValue);
  try
    FetchValue(iValue);
    ReturnValue := FMongoResultSetAdapter.GetFieldValue(CT_KEY);
    CheckEquals(iValue, Integer(ReturnValue));
  finally
    RemoveObject(FConnection, iValue);
  end;
end;

procedure TestTMongoResultSetAdapter.TestGetFieldCount;
var
  ReturnValue: Integer;
  iValue: Integer;
begin
  ReturnValue := FMongoResultSetAdapter.GetFieldCount;
  CheckEquals(0, ReturnValue);
  iValue := Random(1000000);
  InsertObject(FConnection, iValue);
  try
    FetchValue(iValue);
    ReturnValue := FMongoResultSetAdapter.GetFieldCount;
    CheckEquals(1, ReturnValue);
  finally
    RemoveObject(FConnection, iValue);
  end;
end;

procedure TestTMongoResultSetAdapter.TestGetFieldName;
var
  ReturnValue: string;
  iValue: Integer;
begin
  iValue := Random(1000000);
  InsertObject(FConnection, iValue);
  try
    FetchValue(iValue);
    ReturnValue := FMongoResultSetAdapter.GetFieldName(0);
    CheckEqualsString(CT_KEY, ReturnValue);
  finally
    RemoveObject(FConnection, iValue);
  end;
end;

procedure TestTMongoStatementAdapter.SetUp;
begin
  FConnection := TMongoDBConnection.Create;
  FConnection.Open();
  FQuery := TMongoDBQuery.Create(FConnection);
  FMongoStatementAdapter := TMongoStatementAdapter.Create(FQuery);
end;

procedure TestTMongoStatementAdapter.TearDown;
begin
  FMongoStatementAdapter.Free;
  FMongoStatementAdapter := nil;
  FQuery.Free;
  FConnection.Free;
end;

procedure TestTMongoStatementAdapter.TestSetSQLCommand;
var
  ACommandText: string;
begin
  // TODO: Setup method call parameters
  FMongoStatementAdapter.SetSQLCommand(ACommandText);
  // TODO: Validate method results
end;

procedure TestTMongoStatementAdapter.TestSetParams;
begin
  // TODO: Setup method call parameters
//  FMongoStatementAdapter.SetParams(Params);
  // TODO: Validate method results
end;

procedure TestTMongoStatementAdapter.TestExecute;
var
  ReturnValue: NativeUInt;
begin
  ReturnValue := FMongoStatementAdapter.Execute;
  // TODO: Validate method results
end;

procedure TestTMongoStatementAdapter.TestExecuteQuery;
var
  ReturnValue: IDBResultset;
begin
  ReturnValue := FMongoStatementAdapter.ExecuteQuery;
  // TODO: Validate method results
end;

procedure TestTMongoConnectionAdapter.SetUp;
begin
  FConnection := TMongoDBConnection.Create;
  FConnection.Open();
  FMongoConnectionAdapter := TMongoConnectionAdapter.Create(FConnection);
end;

procedure TestTMongoConnectionAdapter.TearDown;
begin
  FMongoConnectionAdapter.Free;
  FMongoConnectionAdapter := nil;
  FConnection.Free;
end;

procedure TestTMongoConnectionAdapter.TestConnect;
begin
  FMongoConnectionAdapter.Connect;
  // TODO: Validate method results
end;

procedure TestTMongoConnectionAdapter.TestDisconnect;
begin
  FMongoConnectionAdapter.Disconnect;
  // TODO: Validate method results
end;

procedure TestTMongoConnectionAdapter.TestIsConnected;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FMongoConnectionAdapter.IsConnected;
  // TODO: Validate method results
end;

procedure TestTMongoConnectionAdapter.TestCreateStatement;
var
  ReturnValue: IDBStatement;
begin
  ReturnValue := FMongoConnectionAdapter.CreateStatement;
  // TODO: Validate method results
end;

procedure TestTMongoConnectionAdapter.TestBeginTransaction;
var
  ReturnValue: IDBTransaction;
begin
  ReturnValue := FMongoConnectionAdapter.BeginTransaction;
  // TODO: Validate method results
end;

procedure TestTMongoConnectionAdapter.TestGetDriverName;
var
  ReturnValue: string;
begin
  ReturnValue := FMongoConnectionAdapter.GetDriverName;
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTMongoResultSetAdapter.Suite);
  RegisterTest(TestTMongoStatementAdapter.Suite);
  RegisterTest(TestTMongoConnectionAdapter.Suite);
end.

