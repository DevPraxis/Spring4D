unit TestAdapterMongoDB;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Core.Interfaces, bsonDoc, Generics.Collections, mongoWire, Core.Base,
  SysUtils, Mapping.Attributes, SQL.Params, Adapters.MongoDB, mongoId;

type
  // Test methods for class TMongoResultSetAdapter
  TBaseMongoTest = class(TTestCase)
  private
    FConnection: TMongoDBConnection;
    FQuery: TMongoDBQuery;
    function GetKeyValue(const AValue: Variant): Variant;
  public
    procedure SetUp; override;
    procedure TearDown; override;

    property Connection: TMongoDBConnection read FConnection;
    property Query: TMongoDBQuery read FQuery;
  end;


  TestTMongoResultSetAdapter = class(TTestCase)
  private
    FConnection: TMongoDBConnection;
    FQuery: TMongoDBQuery;
    FMongoResultSetAdapter: TMongoResultSetAdapter;
  protected
    procedure FetchValue(const AValue: Variant);
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestIsEmpty;
    procedure TestNext;
    procedure TestGetFieldValue;
    procedure TestGetFieldValue1;
    procedure TestGetFieldCount;
    procedure TestGetFieldName;
  end;
  // Test methods for class TMongoStatementAdapter

  TestTMongoStatementAdapter = class(TBaseMongoTest)
  private
//    FConnection: TMongoDBConnection;
   // FQuery: TMongoDBQuery;
    FMongoStatementAdapter: TMongoStatementAdapter;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestSetSQLCommand;
    procedure TestSetParams;
    procedure TestExecute;
    procedure TestExecuteQuery;
  end;
  // Test methods for class TMongoConnectionAdapter

  TestTMongoConnectionAdapter = class(TTestCase)
  private
    FConnection: TMongoDBConnection;
    FMongoConnectionAdapter: TMongoConnectionAdapter;
  protected
    class constructor Create;
  public
    class var
      DirMongoDB: string;

    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestConnect;
    procedure TestDisconnect;
    procedure TestIsConnected;
    procedure TestCreateStatement;
    procedure TestBeginTransaction;
    procedure TestGetDriverName;
  end;

implementation

uses
  Windows
  ,ShellAPI
  ,Forms
  ,Messages
  ;

const
  CT_KEY = 'KEY';
  NAME_COLLECTION = 'UnitTests.MongoAdapter';




procedure InsertObject(AConnection: TMongoDBConnection; const AValue: Variant);
begin
  AConnection.Insert(NAME_COLLECTION, BSON([CT_KEY, AValue]));
end;

procedure RemoveObject(AConnection: TMongoDBConnection; const AValue: Variant);
begin
  AConnection.Delete(NAME_COLLECTION, BSON([CT_KEY, AValue]));
end;

procedure TestTMongoResultSetAdapter.FetchValue(const AValue: Variant);
var
  LDoc: IBSONDocument;
begin
  LDoc := BSON([CT_KEY, AValue]);
  FMongoResultSetAdapter.Document := LDoc;
  FQuery.Query(NAME_COLLECTION, FMongoResultSetAdapter.Document);
  FMongoResultSetAdapter.Next;
end;

procedure TestTMongoResultSetAdapter.SetUp;
begin
  FConnection := TMongoDBConnection.Create;
  FConnection.Open();
  FQuery := TMongoDBQuery.Create(FConnection);
  FMongoResultSetAdapter := TMongoResultSetAdapter.Create(FQuery);
end;

procedure TestTMongoResultSetAdapter.TearDown;
begin
  FMongoResultSetAdapter.Free;
  FMongoResultSetAdapter := nil;
  FConnection.Free;
end;

procedure TestTMongoResultSetAdapter.TestIsEmpty;
begin
  CheckTrue(FMongoResultSetAdapter.IsEmpty);
  InsertObject(FConnection, 10);
  try
    FetchValue(10);
    CheckFalse(FMongoResultSetAdapter.IsEmpty);
  finally
    RemoveObject(FConnection, 10);
  end;
end;

procedure TestTMongoResultSetAdapter.TestNext;
begin
  CheckTrue(FMongoResultSetAdapter.Next);
end;

procedure TestTMongoResultSetAdapter.TestGetFieldValue;
var
  ReturnValue: Variant;
  iValue: Integer;
begin
  iValue := Random(1000000);
  InsertObject(FConnection, iValue);
  try
    FetchValue(iValue);
    ReturnValue := FMongoResultSetAdapter.GetFieldValue(0);
    CheckEquals(iValue, Integer(ReturnValue));
  finally
    RemoveObject(FConnection, iValue);
  end;
end;

procedure TestTMongoResultSetAdapter.TestGetFieldValue1;
var
  ReturnValue: Variant;
  iValue: Integer;
begin
  iValue := Random(1000000);
  InsertObject(FConnection, iValue);
  try
    FetchValue(iValue);
    ReturnValue := FMongoResultSetAdapter.GetFieldValue(CT_KEY);
    CheckEquals(iValue, Integer(ReturnValue));
  finally
    RemoveObject(FConnection, iValue);
  end;
end;

procedure TestTMongoResultSetAdapter.TestGetFieldCount;
var
  ReturnValue: Integer;
  iValue: Integer;
begin
  ReturnValue := FMongoResultSetAdapter.GetFieldCount;
  CheckEquals(0, ReturnValue);
  iValue := Random(1000000);
  InsertObject(FConnection, iValue);
  try
    FetchValue(iValue);
    ReturnValue := FMongoResultSetAdapter.GetFieldCount;
    CheckEquals(1, ReturnValue);
  finally
    RemoveObject(FConnection, iValue);
  end;
end;

procedure TestTMongoResultSetAdapter.TestGetFieldName;
var
  ReturnValue: string;
  iValue: Integer;
begin
  iValue := Random(1000000);
  InsertObject(FConnection, iValue);
  try
    FetchValue(iValue);
    ReturnValue := FMongoResultSetAdapter.GetFieldName(0);
    CheckEqualsString(CT_KEY, ReturnValue);
  finally
    RemoveObject(FConnection, iValue);
  end;
end;

procedure TestTMongoStatementAdapter.SetUp;
begin
  inherited;
  FMongoStatementAdapter := TMongoStatementAdapter.Create(Query);
end;

procedure TestTMongoStatementAdapter.TearDown;
begin
  FMongoStatementAdapter.Free;
  FMongoStatementAdapter := nil;
  Connection.Free;
end;

procedure TestTMongoStatementAdapter.TestSetSQLCommand;
var
  LJson: string;
  LResult: Variant;
begin
  LJson := 'I{"KEY": 1}';
  FMongoStatementAdapter.SetSQLCommand(LJson);
  FMongoStatementAdapter.Execute;

  LResult := GetKeyValue(1);
  CheckEquals(1, LResult);
end;

procedure TestTMongoStatementAdapter.TestSetParams;
begin
  // TODO: Setup method call parameters
//  FMongoStatementAdapter.SetParams(Params);
  // TODO: Validate method results
end;

procedure TestTMongoStatementAdapter.TestExecute;
var
  LJson: string;
  LResult: Variant;
begin
  LJson := 'I{"KEY": 1}';
  FMongoStatementAdapter.SetSQLCommand(LJson);
  FMongoStatementAdapter.Execute;

  LResult := GetKeyValue(1);
  CheckEquals(1, LResult);
end;

procedure TestTMongoStatementAdapter.TestExecuteQuery;
var
  LJson: string;
  LResult: Variant;
  LResultset: IDBResultset;
begin
  LJson := 'I{"KEY": 1}';
  FMongoStatementAdapter.SetSQLCommand(LJson);
  LResultset := FMongoStatementAdapter.ExecuteQuery;
  LResult := LResultset.GetFieldValue(0);
  CheckEquals(1, LResult);
end;

class constructor TestTMongoConnectionAdapter.Create;
begin
  DirMongoDB := 'D:\Downloads\Programming\General\NoSQL\mongodb-win32-i386-2.2.2\bin\';
end;

procedure TestTMongoConnectionAdapter.SetUp;
begin
  FConnection := TMongoDBConnection.Create();
  FConnection.Open();
  FMongoConnectionAdapter := TMongoConnectionAdapter.Create(FConnection);
end;

procedure TestTMongoConnectionAdapter.TearDown;
begin
  FMongoConnectionAdapter.Free;
  FMongoConnectionAdapter := nil;
  FConnection.Free;
end;

procedure TestTMongoConnectionAdapter.TestConnect;
begin
  CheckFalse(FMongoConnectionAdapter.IsConnected);
  FMongoConnectionAdapter.Connect;
  CheckTrue(FMongoConnectionAdapter.IsConnected);
end;

procedure TestTMongoConnectionAdapter.TestDisconnect;
begin
  FMongoConnectionAdapter.Connect;
  CheckTrue(FMongoConnectionAdapter.IsConnected);
  FMongoConnectionAdapter.Disconnect;
  CheckFalse(FMongoConnectionAdapter.IsConnected);
end;

procedure TestTMongoConnectionAdapter.TestIsConnected;
begin
  CheckFalse(FMongoConnectionAdapter.IsConnected);
  FMongoConnectionAdapter.Connect;
  CheckTrue(FMongoConnectionAdapter.IsConnected);
end;

procedure TestTMongoConnectionAdapter.TestCreateStatement;
var
  LStatement: IDBStatement;
begin
  LStatement := FMongoConnectionAdapter.CreateStatement;
  CheckTrue(Assigned(LStatement));
  LStatement := nil;
end;

procedure TestTMongoConnectionAdapter.TestBeginTransaction;
var
  LTran: IDBTransaction;
begin
  LTran := FMongoConnectionAdapter.BeginTransaction;
  CheckTrue(Assigned(LTran));
end;

procedure TestTMongoConnectionAdapter.TestGetDriverName;
var
  LDriverName: string;
begin
  LDriverName := FMongoConnectionAdapter.GetDriverName;
  CheckEquals('MongoDB', LDriverName);
end;

var
  sExecLine: string;
  StartInfo  : TStartupInfo;
  ProcInfo   : TProcessInformation;
  bCreated: Boolean;



{ TBaseMongoTest }

function TBaseMongoTest.GetKeyValue(const AValue: Variant): Variant;
var
  LDoc: IBSONDocument;
begin
  LDoc := BSON([CT_KEY, AValue]);
  FQuery.Query(NAME_COLLECTION, LDoc);
  Result := LDoc.Item[CT_KEY];
end;

procedure TBaseMongoTest.SetUp;
begin
  inherited;
  FConnection := TMongoDBConnection.Create;
  FConnection.Open();
  FQuery := TMongoDBQuery.Create(FConnection);
end;

procedure TBaseMongoTest.TearDown;
begin
  FQuery.Free;
  FConnection.Free;
  inherited;
end;

initialization
  if DirectoryExists(TestTMongoConnectionAdapter.DirMongoDB) then
  begin
    sExecLine := TestTMongoConnectionAdapter.DirMongoDB + 'mongod.exe' +
      Format(' --dbpath "%S" --journal', [TestTMongoConnectionAdapter.DirMongoDB + 'data\db']);

    FillChar(StartInfo,SizeOf(TStartupInfo),#0);
    FillChar(ProcInfo,SizeOf(TProcessInformation),#0);
    StartInfo.cb := SizeOf(TStartupInfo);
    StartInfo.wShowWindow := SW_HIDE;
    bCreated := CreateProcess(nil, PChar(sExecLine), nil, nil, True, 0, nil, nil, StartInfo, ProcInfo);
    if bCreated then
    begin
      RegisterTest(TestTMongoResultSetAdapter.Suite);
      RegisterTest(TestTMongoStatementAdapter.Suite);
      RegisterTest(TestTMongoConnectionAdapter.Suite);
    end;
  end;

finalization
  if bCreated then
  begin
    TerminateProcess(ProcInfo.hProcess, 0);
  end;


end.

