unit TestCoreEntityMap;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Generics.Collections, Rtti, Core.EntityMap, uModels;

type
  // Test methods for class TEntityMap
  {$HINTS OFF}
  TestTEntityMap = class(TTestCase)
  private
    FEntityMap: TEntityMap;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestIsMapped;
    procedure TestAdd;
    procedure TestAddOrReplace;
    procedure TestGet;
    procedure TestRemove;
    procedure TestClear;
  end;

implementation

uses
  SysUtils
  ;

function CreateCustomer(): TCustomer;
begin
  Result := TCustomer.Create;
  Result.Name := 'Test Case';
  Result.Age := 15;
  Result.Height := 1.11;
  Result.LastEdited := EncodeDate(2011,1,1);
  Result.EMail := 'test@gmail.com';
end;

function CreateCompany(): TCompany;
begin
  Result := TCompany.Create;
  Result.Name := 'Test Company';
end;

procedure TestTEntityMap.SetUp;
begin
  FEntityMap := TEntityMap.Create(False);
end;

procedure TestTEntityMap.TearDown;
begin
  FEntityMap.Free;
  FEntityMap := nil;
end;

procedure TestTEntityMap.TestIsMapped;
var
  ReturnValue: Boolean;
  AObject, LClone: TCustomer;
  LCompany, LClonedCompany: TCompany;
begin
  AObject := CreateCustomer;
  LCompany := CreateCompany;
  LClone := CreateCustomer;
  LClonedCompany := CreateCompany;
  try
    ReturnValue := FEntityMap.IsMapped(AObject);
    CheckFalse(ReturnValue);

    FEntityMap.Add(LClone);
    ReturnValue := FEntityMap.IsMapped(AObject);
    CheckTrue(ReturnValue);

    ReturnValue := FEntityMap.IsMapped(LCompany);
    CheckFalse(ReturnValue);
    FEntityMap.AddOrReplace(LClonedCompany);

    ReturnValue := FEntityMap.IsMapped(LCompany);
    CheckTrue(ReturnValue);
  finally
    AObject.Free;
    LCompany.Free;
    LClone.Free;
    LClonedCompany.Free;
  end;
end;

procedure TestTEntityMap.TestAdd;
var
  LCustomer: TCustomer;
begin
  LCustomer := CreateCustomer;
  try
    CheckFalse(FEntityMap.IsMapped(LCustomer));
    FEntityMap.Add(LCustomer);
    CheckTrue(FEntityMap.IsMapped(LCustomer));
  finally
    LCustomer.Free;
  end;
end;

procedure TestTEntityMap.TestAddOrReplace;
var
  LCustomer: TCustomer;
begin
  LCustomer := CreateCustomer;
  try
    CheckFalse(FEntityMap.IsMapped(LCustomer));
    FEntityMap.Add(LCustomer);
    CheckTrue(FEntityMap.IsMapped(LCustomer));
    FEntityMap.AddOrReplace(LCustomer);
    CheckTrue(FEntityMap.IsMapped(LCustomer));
  finally
    LCustomer.Free;
  end;
end;

procedure TestTEntityMap.TestGet;
var
  LCustomer, LGotCustomer: TCustomer;
begin
  LCustomer := CreateCustomer;
  try
    LGotCustomer := nil;
    try
      LGotCustomer := FEntityMap.Get(LCustomer) as TCustomer;
    except
      on E:Exception do
      begin
        CheckTrue(LGotCustomer = nil);
      end;
    end;
    FEntityMap.Add(LCustomer);
    LGotCustomer := FEntityMap.Get(LCustomer) as TCustomer;
    CheckTrue(LGotCustomer <> nil);
  finally
    LCustomer.Free;
  end;
end;

procedure TestTEntityMap.TestRemove;
var
  LCustomer: TCustomer;
begin
  LCustomer := CreateCustomer;
  try
    FEntityMap.Add(LCustomer);
    CheckTrue(FEntityMap.IsMapped(LCustomer));
    FEntityMap.Remove(LCustomer);
    CheckFalse(FEntityMap.IsMapped(LCustomer));
  finally
    LCustomer.Free;
  end;
end;

procedure TestTEntityMap.TestClear;
var
  LCustomer: TCustomer;
begin
  LCustomer := CreateCustomer;
  try
    FEntityMap.Add(LCustomer);
    CheckTrue(FEntityMap.IsMapped(LCustomer));
    FEntityMap.Clear(True);
    CheckFalse(FEntityMap.IsMapped(LCustomer));
  finally
    LCustomer.Free;
  end;
end;

{$HINTS ON}

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTEntityMap.Suite);
end.

