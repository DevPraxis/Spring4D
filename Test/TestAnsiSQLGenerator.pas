unit TestAnsiSQLGenerator;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, SQL.AbstractSQLGenerator, SQL.AnsiSQLGenerator, SQL.Commands, SQL.Types;

type
  // Test methods for class TAnsiSQLGenerator

  TestTAnsiSQLGenerator = class(TTestCase)
  private
    FAnsiSQLGenerator: TAnsiSQLGenerator;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestGetDriverName;
    procedure TestGenerateSelect;
    procedure TestGenerateInsert;
    procedure TestGenerateUpdate;
    procedure TestGenerateDelete;
    procedure TestGenerateCreateTable;
    procedure TestGenerateCreateFK;
    procedure TestGenerateCreateSequence;
    procedure TestGenerateGetNextSequenceValue;
    procedure TestGenerateGetLastInsertId;
  end;

implementation

uses
  SysUtils,
  StrUtils;

function CreateTestTable(): TSQLTable;
begin
  Result := TSQLTable.Create;
  Result.Schema := 'TEST';
  Result.Name := 'CUSTOMERS';
  Result.Description := 'Customers table';
//  Result.Alias := 'C';
end;

function CreateTestJoinTable(): TSQLTable;
begin
  Result := TSQLTable.Create;
  Result.Schema := 'TEST';
  Result.Name := 'PRODUCTS';
  Result.Description := 'Products table';
 // Result.Alias := 'P';
end;

function CreateTestCOUNTRYTable(): TSQLTable;
begin
  Result := TSQLTable.Create;
  Result.Schema := 'TEST';
  Result.Name := 'COUNTRIES';
  Result.Description := 'Countries table';
 // Result.Alias := 'P';
end;

procedure TestTAnsiSQLGenerator.SetUp;
begin
  FAnsiSQLGenerator := TAnsiSQLGenerator.Create();
end;

procedure TestTAnsiSQLGenerator.TearDown;
begin
  FAnsiSQLGenerator.Free;
  FAnsiSQLGenerator := nil;
end;

procedure TestTAnsiSQLGenerator.TestGetDriverName;
var
  ReturnValue: string;
begin
  ReturnValue := FAnsiSQLGenerator.GetDriverName;

  CheckEqualsString('ANSI-SQL', ReturnValue);
end;

const
  SQL_SELECT_TEST_SIMPLE = 'SELECT A.NAME,A.AGE,A.HEIGHT'+ #13#10 +
    ' FROM TEST.CUSTOMERS A;';

  SQL_SELECT_TEST_JOIN = 'SELECT A.NAME,A.AGE,A.HEIGHT'+ #13#10 +
    ' FROM TEST.CUSTOMERS A' + #13#10 +
    '  INNER JOIN TEST.PRODUCTS B ON B.ID=A.PRODID'+
    ';';

  SQL_SELECT_TEST_JOIN_2 = 'SELECT A.NAME,A.AGE,A.HEIGHT,C.COUNTRYNAME'+ #13#10 +
    ' FROM TEST.CUSTOMERS A' + #13#10 +
    '  INNER JOIN TEST.PRODUCTS B ON B.ID=A.PRODID'+#13#10+
    '  LEFT OUTER JOIN TEST.COUNTRIES C ON C.ID=A.COUNTRYID'+
    ';';

  SQL_SELECT_TEST_JOIN_2_ORDER = 'SELECT A.NAME,A.AGE,A.HEIGHT,C.COUNTRYNAME'+ #13#10 +
    ' FROM TEST.CUSTOMERS A' + #13#10 +
    '  INNER JOIN TEST.PRODUCTS B ON B.ID=A.PRODID'+#13#10+
    '  LEFT OUTER JOIN TEST.COUNTRIES C ON C.ID=A.COUNTRYID'+#13#10+
    '  ORDER BY A.AGE DESC'+
    ';';

  SQL_SELECT_TEST_JOIN_2_ORDER_MULTIPLE = 'SELECT A.NAME,A.AGE,A.HEIGHT,C.COUNTRYNAME'+ #13#10 +
    ' FROM TEST.CUSTOMERS A' + #13#10 +
    '  INNER JOIN TEST.PRODUCTS B ON B.ID=A.PRODID'+#13#10+
    '  LEFT OUTER JOIN TEST.COUNTRIES C ON C.ID=A.COUNTRYID'+#13#10+
    '  ORDER BY A.AGE DESC,C.COUNTRYNAME ASC'+
    ';';

  SQL_SELECT_TEST_JOIN_2_ORDER_GROUP = 'SELECT A.NAME,A.AGE,A.HEIGHT,C.COUNTRYNAME'+ #13#10 +
    ' FROM TEST.CUSTOMERS A' + #13#10 +
    '  INNER JOIN TEST.PRODUCTS B ON B.ID=A.PRODID'+#13#10+
    '  LEFT OUTER JOIN TEST.COUNTRIES C ON C.ID=A.COUNTRYID'+#13#10+
    '  GROUP BY A.HEIGHT,A.NAME,A.AGE,C.COUNTRYNAME'+#13#10+
    '  ORDER BY A.AGE DESC,C.COUNTRYNAME ASC'+
    ';';

procedure TestTAnsiSQLGenerator.TestGenerateSelect;
var
  sSql: string;
  LCommand: TSelectCommand;
  LTable, LJoinTable, LCountriesTable: TSQLTable;
  LJoin: TSQLJoin;
begin
  LTable := CreateTestTable;
  LJoinTable := CreateTestJoinTable();
  LCountriesTable := CreateTestCOUNTRYTable;
  LCommand := TSelectCommand.Create(LTable);
  try
    LCommand.SelectFields.Add(TSQLSelectField.Create('NAME', LTable));
    LCommand.SelectFields.Add(TSQLSelectField.Create('AGE', LTable));
    LCommand.SelectFields.Add(TSQLSelectField.Create('HEIGHT', LTable));

    sSql := FAnsiSQLGenerator.GenerateSelect(LCommand);
    CheckEqualsString(SQL_SELECT_TEST_SIMPLE, sSql);

    LJoin := TSQLJoin.Create(jtInner);
    LJoin.Segments.Add
    (
      TSQLJoinSegment.Create
      (
        TSQLField.Create('ID', LJoinTable)
        ,TSQLField.Create('PRODID', LTable)
      )
    );
    LCommand.Joins.Add(LJoin);

    sSql := FAnsiSQLGenerator.GenerateSelect(LCommand);
    CheckEqualsString(SQL_SELECT_TEST_JOIN, sSql);

    LCommand.SelectFields.Add(TSQLSelectField.Create('COUNTRYNAME', LCountriesTable));
    LJoin := TSQLJoin.Create(jtLeft);
    LJoin.Segments.Add
    (
      TSQLJoinSegment.Create
      (
        TSQLField.Create('ID', LCountriesTable)
        ,TSQLField.Create('COUNTRYID', LTable)
      )
    );
    LCommand.Joins.Add(LJoin);

    sSql := FAnsiSQLGenerator.GenerateSelect(LCommand);
    CheckEqualsString(SQL_SELECT_TEST_JOIN_2, sSql);

    LCommand.OrderByFields.Add(TSQLOrderField.Create('AGE', LTable));
    LCommand.OrderByFields[0].OrderType := otDescending;

    sSql := FAnsiSQLGenerator.GenerateSelect(LCommand);
    CheckEqualsString(SQL_SELECT_TEST_JOIN_2_ORDER, sSql);

    LCommand.OrderByFields.Add(TSQLOrderField.Create('COUNTRYNAME', LCountriesTable));
    sSql := FAnsiSQLGenerator.GenerateSelect(LCommand);
    CheckEqualsString(SQL_SELECT_TEST_JOIN_2_ORDER_MULTIPLE, sSql);

    LCommand.GroupByFields.Add(TSQLGroupByField.Create('HEIGHT', LTable));
    LCommand.GroupByFields.Add(TSQLGroupByField.Create('NAME', LTable));
    LCommand.GroupByFields.Add(TSQLGroupByField.Create('AGE', LTable));
    LCommand.GroupByFields.Add(TSQLGroupByField.Create('COUNTRYNAME', LCountriesTable));

    sSql := FAnsiSQLGenerator.GenerateSelect(LCommand);
    CheckEqualsString(SQL_SELECT_TEST_JOIN_2_ORDER_GROUP, sSql);

  finally
    LTable.Free;
    LJoinTable.Free;
    LCountriesTable.Free;
    LCommand.Free;
  end;
end;

const
  SQL_INSERT_TEST = 'INSERT INTO TEST.CUSTOMERS ('+ #13#10 +
    '  NAME,AGE,HEIGHT)'+ #13#10 +
    '  VALUES ('+ #13#10 +
    ':NAME,:AGE,:HEIGHT);';

  SQL_INSERT_TEST_WITHOUT_SCHEMA = 'INSERT INTO CUSTOMERS ('+ #13#10 +
    '  NAME,AGE,HEIGHT)'+ #13#10 +
    '  VALUES ('+ #13#10 +
    ':NAME,:AGE,:HEIGHT);';

procedure TestTAnsiSQLGenerator.TestGenerateInsert;
var
  ReturnValue: string;
  LCommand: TInsertCommand;
  LTable: TSQLTable;
begin
  LTable := CreateTestTable;
  LCommand := TInsertCommand.Create(LTable);
  try
    LCommand.InsertFields.Add(TSQLField.Create('NAME', LTable));
    LCommand.InsertFields.Add(TSQLField.Create('AGE', LTable));
    LCommand.InsertFields.Add(TSQLField.Create('HEIGHT', LTable));

    ReturnValue := FAnsiSQLGenerator.GenerateInsert(LCommand);
    CheckEqualsString(SQL_INSERT_TEST, ReturnValue);

    LTable.Schema := '';
    ReturnValue := FAnsiSQLGenerator.GenerateInsert(LCommand);
    CheckEqualsString(SQL_INSERT_TEST_WITHOUT_SCHEMA, ReturnValue);

  finally
    LCommand.Free;
    LTable.Free;
  end;
end;

procedure TestTAnsiSQLGenerator.TestGenerateUpdate;
var
  ReturnValue: string;
  LCommand: TUpdateCommand;
begin
  ReturnValue := FAnsiSQLGenerator.GenerateUpdate(LCommand);
  // TODO: Validate method results
end;

procedure TestTAnsiSQLGenerator.TestGenerateDelete;
var
  ReturnValue: string;
  LCommand: TDeleteCommand;
begin
  ReturnValue := FAnsiSQLGenerator.GenerateDelete(LCommand);
  // TODO: Validate method results
end;

procedure TestTAnsiSQLGenerator.TestGenerateCreateTable;
var
  ReturnValue: string;
begin
  ReturnValue := FAnsiSQLGenerator.GenerateCreateTable;
  // TODO: Validate method results
end;

procedure TestTAnsiSQLGenerator.TestGenerateCreateFK;
var
  ReturnValue: string;
begin
  ReturnValue := FAnsiSQLGenerator.GenerateCreateFK;
  // TODO: Validate method results
end;

procedure TestTAnsiSQLGenerator.TestGenerateCreateSequence;
var
  ReturnValue: string;
begin
  ReturnValue := FAnsiSQLGenerator.GenerateCreateSequence;
  // TODO: Validate method results
end;

procedure TestTAnsiSQLGenerator.TestGenerateGetNextSequenceValue;
var
  ReturnValue: string;
begin
  ReturnValue := FAnsiSQLGenerator.GenerateGetNextSequenceValue;
  // TODO: Validate method results
end;

procedure TestTAnsiSQLGenerator.TestGenerateGetLastInsertId;
var
  ReturnValue: string;
begin
  ReturnValue := FAnsiSQLGenerator.GenerateGetLastInsertId;
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTAnsiSQLGenerator.Suite);
end.

