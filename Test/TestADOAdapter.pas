unit TestADOAdapter;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

{$I sv.inc}

uses
  TestFramework, ADODB, Generics.Collections, Adapters.ADO, Core.Base, SysUtils,
  SQL.Params, Core.Interfaces, SQL.AnsiSQLGenerator, Adapters.MSSQL, Core.EntityManager
  ,uModels;

type
  // Test methods for class TADOResultSetAdapter

  TestTADOResultSetAdapter = class(TTestCase)
  private
    FADOResultSetAdapter: TADOResultSetAdapter;
    FDataset: TADOQuery;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestIsEmpty;
    procedure TestNext;
    procedure TestGetFieldValue;
    procedure TestGetFieldValue1;
    procedure TestGetFieldCount;
  end;
  // Test methods for class TADOStatementAdapter

  TestTADOStatementAdapter = class(TTestCase)
  private
    FADOStatementAdapter: TADOStatementAdapter;
    FStatement: TADOQuery;
    procedure InternalSetParams;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestSetSQLCommand;
    procedure TestSetParams();
    procedure TestExecute;
    procedure TestExecuteQuery;
  end;
  // Test methods for class TADOConnectionAdapter

  TestTADOConnectionAdapter = class(TTestCase)
  private
    FADOConnectionAdapter: TADOConnectionAdapter;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestConnect;
    procedure TestDisconnect;
    procedure TestIsConnected;
    procedure TestCreateStatement;
    procedure TestBeginTransaction;
    procedure TestGetDriverName;
  end;
  // Test methods for class TADOTransactionAdapter

  TestTADOTransactionAdapter = class(TTestCase)
  private
    FADOTransactionAdapter: TADOTransactionAdapter;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestCommit;
    procedure TestRollback;
  end;
  // Test methods for class TADOSQLGenerator

  TestTADOSQLGenerator = class(TTestCase)
  private
    FADOSQLGenerator: TADOSQLGenerator;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestGetDriverName;
    procedure TestGenerateGetLastInsertId;
  end;

  TestMSSQLAdapter = class(TTestCase)
  private
    FConnection: IDBConnection;
    FManager: TEntityManager;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestFirst();
    procedure TestFetch();
    procedure TestFetchWorkers();
    procedure TestPage();
    procedure TestUpdate();
    procedure TestUpdateNothingChanged();
    procedure TestInsert();
    procedure TestSave();
  end;

  TestMSSQLSQLGenerator = class(TTestCase)
  private
    FSQLGenerator: TMSSQLServerSQLGenerator;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestGeneratePagedQuery();
  end;

implementation

uses
  Core.ConnectionFactory
  ,Core.DatabaseManager
  ,SvDesignPatterns
  ,SQL.Register
  {$IFDEF USE_SPRING} ,Spring.Collections {$ENDIF}
  ,DB
  ,Diagnostics
  ,Graphics
  ,pngimage
  {$IFDEF MSWINDOWS}
  ,Windows
  {$ENDIF}
  ;

var
  TestDB: TADOConnection = nil;

const
  SQL_SELECT_ALL = 'SELECT * FROM VIKARINA.IMONES;';

function CreateUniDataset(const ASql: string): TADOQuery;
begin
  Result := TADOQuery.Create(nil);
  Result.CursorType := ctOpenForwardOnly;
  Result.CursorLocation := clUseServer;
  Result.Connection := TestDB;
  Result.SQL.Text := ASql;
  Result.DisableControls;
  try
    Result.Open;
  finally
    Result.EnableControls;
  end;
end;

procedure InsertCompany(ACompanyID: Integer);
begin
  TestDB.Execute(Format('INSERT INTO VIKARINA.IMONES (IMONE) VALUES (%0:D);', [ACompanyID]));
end;

function GetCompaniesCount: Integer;
var
  LTable: _Recordset;
begin
  LTable := TestDB.Execute('SELECT COUNT(*) FROM VIKARINA.IMONES;');
  Result := LTable.Fields[0].Value;
end;

function GetSQLCount(const ACountSQL: string): Integer;
var
  LTable: _Recordset;
begin
  LTable := TestDB.Execute(ACountSQL);
  Result := LTable.Fields[0].Value;
end;

function GetSQLFirstFieldValue(const ASQL: string): Variant;
var
  LTable: _Recordset;
begin
  LTable := TestDB.Execute(ASQL);
  Result := LTable.Fields[0].Value;
end;

procedure UpdateLogo();
var
  dst: TADOQuery;
begin
  dst := TADOQuery.Create(nil);
  try
    dst.Connection := TestDB;
    dst.SQL.Text := 'UPDATE VIKARINA.IMONES SET IMLOG = (SELECT TOP 1 NUOTRAUK FROM ASMKORT WHERE NUOTRAUK IS NOT NULL) WHERE IMONE = 1;';
    dst.ExecSQL;
  finally
    dst.Free;
  end;
end;

procedure RemoveLogo();
begin
  TestDB.Execute('UPDATE VIKARINA.IMONES SET IMLOG = NULL WHERE IMONE = 1;');
end;

procedure TestTADOResultSetAdapter.SetUp;
begin
  FDataset := CreateUniDataset(SQL_SELECT_ALL);
  FADOResultSetAdapter := TADOResultSetAdapter.Create(FDataset);
end;

procedure TestTADOResultSetAdapter.TearDown;
begin
  FADOResultSetAdapter.Free;
  FADOResultSetAdapter := nil;
end;

procedure TestTADOResultSetAdapter.TestIsEmpty;
begin
  CheckFalse(FADOResultSetAdapter.IsEmpty);

  while FADOResultSetAdapter.Next do
  begin
    CheckFalse(FADOResultSetAdapter.IsEmpty);
  end;

  CheckTrue(FADOResultSetAdapter.IsEmpty);
end;

procedure TestTADOResultSetAdapter.TestNext;
begin
  CheckTrue(FADOResultSetAdapter.Next);
  CheckTrue(FADOResultSetAdapter.Next);

  while FADOResultSetAdapter.Next do
  begin
    CheckFalse(FADOResultSetAdapter.IsEmpty);
  end;

  CheckFalse(FADOResultSetAdapter.Next);
end;

procedure TestTADOResultSetAdapter.TestGetFieldValue;
var
  ReturnValue: Variant;
begin
  ReturnValue := FADOResultSetAdapter.GetFieldValue(0);

  CheckEquals(1, Integer(ReturnValue));
end;

procedure TestTADOResultSetAdapter.TestGetFieldValue1;
var
  ReturnValue: Variant;
begin
  ReturnValue := FADOResultSetAdapter.GetFieldValue('IMONE');
  CheckEquals(1, Integer(ReturnValue));
end;

procedure TestTADOResultSetAdapter.TestGetFieldCount;
var
  ReturnValue: Integer;
  LData: TADOQuery;
begin
  ReturnValue := FADOResultSetAdapter.GetFieldCount;

  LData := CreateUniDataset(SQL_SELECT_ALL);
  try
    CheckEquals(LData.FieldCount, ReturnValue);
  finally
    LData.Free;
  end;
end;

procedure TestTADOStatementAdapter.SetUp;
begin
  FStatement := CreateUniDataset(SQL_SELECT_ALL);
  FStatement.Close;
  FADOStatementAdapter := TADOStatementAdapter.Create(FStatement);
end;

procedure TestTADOStatementAdapter.TearDown;
begin
  FADOStatementAdapter.Free;
  FADOStatementAdapter := nil;
end;

procedure TestTADOStatementAdapter.TestSetSQLCommand;
begin
  FADOStatementAdapter.SetSQLCommand(SQL_SELECT_ALL);
  CheckEqualsString(Trim(FADOStatementAdapter.Statement.SQL.Text), SQL_SELECT_ALL);
end;

procedure TestTADOStatementAdapter.TestSetParams;
begin
  FADOStatementAdapter.SetSQLCommand('SELECT * FROM VIKARINA.IMONES WHERE IMONE=:IMONE;');
  InternalSetParams;
  CheckEquals(1, FADOStatementAdapter.Statement.Parameters.Count);
end;

procedure TestTADOStatementAdapter.TestExecute;
var
  ReturnValue: NativeUInt;
begin
  FADOStatementAdapter.SetSQLCommand('UPDATE VIKARINA.IMONES SET IMPAV3 = NULL WHERE IMONE = :IMONE;');

  InternalSetParams;

  ReturnValue := FADOStatementAdapter.Execute();

  CheckEquals(1, ReturnValue);
end;

procedure TestTADOStatementAdapter.TestExecuteQuery;
var
  ReturnValue: IDBResultset;
begin
  FADOStatementAdapter.SetSQLCommand('SELECT * FROM VIKARINA.IMONES WHERE IMONE=:IMONE;');
  InternalSetParams;
  ReturnValue := FADOStatementAdapter.ExecuteQuery;

  CheckTrue(Assigned(ReturnValue));
  CheckFalse(ReturnValue.IsEmpty);
  CheckEquals(1, Integer(ReturnValue.GetFieldValue('IMONE')));
end;

procedure TestTADOStatementAdapter.InternalSetParams;
var
  LParam: TDBParam;
  Params: TObjectList<TDBParam>;
begin
  Params := TObjectList<TDBParam>.Create;
  try
    LParam := TDBParam.Create;
    LParam.Name := ':IMONE';
    LParam.Value := 1;
    LParam.ParamType := ftInteger;
    Params.Add(LParam);
    FADOStatementAdapter.SetParams(Params);
  finally
    Params.Free;
  end;
end;

procedure TestTADOConnectionAdapter.SetUp;
begin
  FADOConnectionAdapter := TADOConnectionAdapter.Create(TestDB);
end;

procedure TestTADOConnectionAdapter.TearDown;
begin
  FADOConnectionAdapter.Free;
  FADOConnectionAdapter := nil;
end;

procedure TestTADOConnectionAdapter.TestConnect;
begin
  FADOConnectionAdapter.Connect;
  CheckTrue(TestDB.Connected);
end;

procedure TestTADOConnectionAdapter.TestDisconnect;
begin
  FADOConnectionAdapter.Disconnect;
  CheckFalse(TestDB.Connected);
  TestDB.Open();
end;

procedure TestTADOConnectionAdapter.TestIsConnected;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FADOConnectionAdapter.IsConnected;
  CheckTrue(ReturnValue);
end;

procedure TestTADOConnectionAdapter.TestCreateStatement;
var
  ReturnValue: IDBStatement;
begin
  ReturnValue := FADOConnectionAdapter.CreateStatement;
  CheckTrue(Assigned(ReturnValue));
end;

procedure TestTADOConnectionAdapter.TestBeginTransaction;
var
  ReturnValue: IDBTransaction;
begin
  ReturnValue := FADOConnectionAdapter.BeginTransaction;
  CheckTrue(Assigned(ReturnValue));
  CheckTrue(TestDB.InTransaction);
end;

procedure TestTADOConnectionAdapter.TestGetDriverName;
var
  ReturnValue: string;
begin
  ReturnValue := FADOConnectionAdapter.GetDriverName;
  CheckEqualsString('ADO', ReturnValue);
end;

procedure TestTADOTransactionAdapter.SetUp;
begin
  FADOTransactionAdapter := TADOTransactionAdapter.Create(TestDB);
  TestDB.BeginTrans;
end;

procedure TestTADOTransactionAdapter.TearDown;
begin
  FADOTransactionAdapter.Free;
  FADOTransactionAdapter := nil;
end;

procedure TestTADOTransactionAdapter.TestCommit;
var
  iCount: Integer;
  iCompanyID: Integer;
begin
  iCompanyID := 50;
  iCount := GetCompaniesCount;

  InsertCompany(iCompanyID);

  FADOTransactionAdapter.Commit;

  CheckEquals(iCount + 1, GetCompaniesCount);

  TestDB.Execute(Format('DELETE FROM VIKARINA.IMONES WHERE IMONE = %0:D;', [iCompanyID]));
end;

procedure TestTADOTransactionAdapter.TestRollback;
var
  iCount: Integer;
  iCompanyID: Integer;
begin
  iCompanyID := 50;
  iCount := GetCompaniesCount;

  InsertCompany(iCompanyID);
  FADOTransactionAdapter.Rollback;

  CheckEquals(iCount, GetCompaniesCount);
end;

procedure TestTADOSQLGenerator.SetUp;
begin
  FADOSQLGenerator := TADOSQLGenerator.Create;
end;

procedure TestTADOSQLGenerator.TearDown;
begin
  FADOSQLGenerator.Free;
  FADOSQLGenerator := nil;
end;

procedure TestTADOSQLGenerator.TestGetDriverName;
var
  ReturnValue: string;
begin
  ReturnValue := FADOSQLGenerator.GetDriverName;
  CheckEqualsString('ADO', ReturnValue);
end;

procedure TestTADOSQLGenerator.TestGenerateGetLastInsertId;
var
  ReturnValue: string;
begin
  ReturnValue := FADOSQLGenerator.GenerateGetLastInsertId;
  CheckEqualsString('', ReturnValue);
end;

{$IFDEF MSWINDOWS}

{ TestMSSQLAdapter }

procedure TestMSSQLAdapter.SetUp;
begin
  inherited;
  TSQLGeneratorRegister.SetCurrentGenerator('MSSQL');
  FConnection := ConnectionFactory.GetInstance(dtMSSQL);
  FManager := TEntityManager.Create(FConnection);
end;

procedure TestMSSQLAdapter.TearDown;
begin
  FManager.Free;
  inherited;
end;

procedure TestMSSQLAdapter.TestFetch;
var
  LCompany: TCompany;
  LCompanies: IList<TCompany>;
begin
  LCompanies := TCollections.CreateList<TCompany>(True);
  FManager.Fetch<TCompany>('SELECT * FROM VIKARINA.IMONES;', [], LCompanies);
  CheckTrue(LCompanies.Count > 0);
  LCompany := LCompanies.First;
  CheckEquals(1, LCompany.ID);
end;

procedure TestMSSQLAdapter.TestFetchWorkers;
var
  LWorkers: IList<TWorker>;
  LWorker: TWorker;
  sw: TStopwatch;
begin
  LWorkers := TCollections.CreateList<TWorker>(True);
  sw := TStopwatch.StartNew;
  FManager.Fetch<TWorker>('SELECT * FROM VIKARINA.DARSDLA WHERE IMONE = :0 ORDER BY 1;', [1], LWorkers);
  sw.Stop;
  CheckTrue(LWorkers.Count > 0);
  LWorker := LWorkers.First;

  CheckEqualsString('vikarina', LWorker.LastEditedBy);
  LWorker.LastEditedBy := 'ORM Test Case';
  FManager.Update(LWorker);

  LWorker.LastEditedBy := 'vikarina';
  FManager.Update(LWorker);

  Status(Format('Fetched %0:D workers in %1:D ms.',
    [LWorkers.Count, sw.ElapsedMilliseconds]));
end;

procedure TestMSSQLAdapter.TestFirst;
var
  LCompany: TCompany;
  sFile: string;
begin
  UpdateLogo();
  sFile := IncludeTrailingPathDelimiter(ExtractFileDir(ParamStr(0))) + 'Test.jpg';
  LCompany := FManager.FirstOrDefault<TCompany>('SELECT * FROM VIKARINA.IMONES;', []);
  try
    CheckTrue(Assigned(LCompany));
    CheckEquals(1, LCompany.ID);
    CheckFalse(LCompany.Logo.Graphic.Empty);
    LCompany.Logo.SaveToFile(sFile);
    CheckTrue(FileExists(sFile));

  finally
    RemoveLogo();
    DeleteFile(PChar(sFile));
    LCompany.Free;
  end;
end;

const
  FILE_IMG_TEST_LOGO = 'DelphiOOP.png';

procedure TestMSSQLAdapter.TestInsert;
var
  LCompany: TCompany;
  sLogo, sOutputDir: string;
  iCount: Integer;
  LTran: IDBTransaction;
begin
  LCompany := TCompany.Create;
  sOutputDir := IncludeTrailingPathDelimiter(ExtractFileDir(ParamStr(0)));
  sLogo := IncludeTrailingPathDelimiter(ExpandFileName(sOutputDir + '..\..')) + FILE_IMG_TEST_LOGO;
  try
    iCount := GetSQLCount('select count(*) from vikarina.imones;');
    LCompany.Name := 'ORM';
    LCompany.Address := 'ORM street';
    LCompany.Telephone := '+37068569854';
    LCompany.Logo.LoadFromFile(sLogo);
    LCompany.ID := 7;

    LTran := FManager.Connection.BeginTransaction;

    FManager.Insert(LCompany);

    CheckEquals(iCount + 1, GetSQLCount('select count(*) from vikarina.imones;'));
  finally
    LCompany.Free;
  end;
end;

procedure TestMSSQLAdapter.TestPage;
var
  LPage: IDBPage<TWorker>;
begin
  LPage := FManager.Page<TWorker>(1, 10, 'SELECT * FROM VIKARINA.DARSDLA WHERE IMONE = :0', [1]);
  CheckEquals(10, LPage.Items.Count);
end;



procedure TestMSSQLAdapter.TestSave;
var
  LCompany: TCompany;
  LTran: IDBTransaction;
  iCount: Integer;
begin
  LCompany := TCompany.Create;
  try
    iCount := GetSQLCount('select count(*) from vikarina.imones;');
    LCompany.Name := 'ORM';
    LCompany.Address := 'ORM street';
    LCompany.Telephone := '+37068569854';
    LCompany.ID := 7;

    LTran := FManager.Connection.BeginTransaction;

    FManager.Save(LCompany);

    CheckEquals(iCount + 1, GetSQLCount('select count(*) from vikarina.imones;'));

    LCompany.Name := 'ORM Name changed';
    FManager.Save(LCompany);
    CheckEquals(iCount + 1, GetSQLCount('select count(*) from vikarina.imones;'));
    CheckEqualsString(LCompany.Name,string(GetSQLFirstFieldValue('select IMPAV from vikarina.imones where imone = 7;')));

  finally
    LCompany.Free;
  end;
end;

procedure TestMSSQLAdapter.TestUpdate;
var
  LCompany: TCompany;
  sOutputDir, sDestDir, sFile: string;
  LPic: TPicture;
begin
  UpdateLogo();
  LPic := TPicture.Create;
  sOutputDir := IncludeTrailingPathDelimiter(ExtractFileDir(ParamStr(0)));
  LCompany := FManager.FirstOrDefault<TCompany>('SELECT * FROM VIKARINA.IMONES;', []);
  try
    CheckTrue(Assigned(LCompany));
    CheckEquals(1, LCompany.ID);
    CheckFalse(LCompany.Logo.Graphic.Empty);
    sDestDir := IncludeTrailingPathDelimiter(ExpandFileName(sOutputDir + '..\..'));
    sFile := sDestDir + FILE_IMG_TEST_LOGO;
    LPic.LoadFromFile(sFile);

    LCompany.Logo.Assign(LPic);

    FManager.Update(LCompany);
    CheckEquals(0, GetSQLCount('select count(*) from vikarina.imones where imone = 1 and imlog is null;'));

    LCompany.Logo.Assign(nil);
    FManager.Update(LCompany);

    CheckEquals(1, GetSQLCount('select count(*) from vikarina.imones where imone = 1 and imlog is null;'));
    FManager.Update(LCompany);
  finally
    RemoveLogo();
    LPic.Free;
    LCompany.Free;
  end;
end;

procedure TestMSSQLAdapter.TestUpdateNothingChanged;
var
  LCompany: TCompany;
begin
  LCompany := FManager.SingleOrDefault<TCompany>('SELECT * FROM VIKARINA.IMONES;', []);
  try
    FManager.Update(LCompany);
  finally
    LCompany.Free;
  end;
end;

{ TestMSSQLSQLGenerator }

procedure TestMSSQLSQLGenerator.SetUp;
begin
  inherited;
  FSQLGenerator := TMSSQLServerSQLGenerator.Create();
end;

procedure TestMSSQLSQLGenerator.TearDown;
begin
  FSQLGenerator.Free;
  inherited;
end;

const
  SQL_PAGED_TEST = 'SELECT * FROM VIKARINA.IMONES WHERE IMONE = 1;';
  SQL_EXPECTED_PAGED = 	 'SELECT * FROM ('+
		'  SELECT *,  ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS ORM_ROW_NUM FROM ('+
		'    SELECT * FROM VIKARINA.IMONES WHERE IMONE = 1) AS ORM_TOTAL_1'+
		'  ) AS ORM_TOTAL_2'+
		' WHERE (ORM_ROW_NUM>=1) AND (ORM_ROW_NUM < 1 + 10);';

procedure TestMSSQLSQLGenerator.TestGeneratePagedQuery;
var
  LSQL: string;
begin
  LSQL := FSQLGenerator.GeneratePagedQuery(SQL_PAGED_TEST, 10, 1);
  CheckEqualsString(SQL_EXPECTED_PAGED, LSQL);
end;

type
  TMSSQLEvents = class
  public
    class function GetConstructor: TFactoryMethod<IDBConnection>;
  end;

{ TMSSQLEvents }

class function TMSSQLEvents.GetConstructor: TFactoryMethod<IDBConnection>;
begin
  Result := function: IDBConnection
  begin
    Result := TMSSQLConnectionAdapter.Create(TestDB);
  end;
end;

var
  ODBC: IODBC;
  ODBCSources: TArray<string>;
  fIndex: Integer;

const
  DS_TEST_NAME = 'Viktor2008';



initialization
  ODBC := TBaseODBC.Create;
  ODBCSources := ODBC.GetDatasources();
  TArray.Sort<string>(ODBCSources);
  if not TArray.BinarySearch<string>(ODBCSources, DS_TEST_NAME, fIndex) then
  begin
    fIndex := -1;
    Exit;
  end;
  RegisterTest(TestTADOResultSetAdapter.Suite);
  RegisterTest(TestTADOStatementAdapter.Suite);
  RegisterTest(TestTADOConnectionAdapter.Suite);
  RegisterTest(TestTADOTransactionAdapter.Suite);
  RegisterTest(TestTADOSQLGenerator.Suite);
  RegisterTest(TestMSSQLAdapter.Suite);
  RegisterTest(TestMSSQLSQLGenerator.Suite);

  TestDB := TADOConnection.Create(nil);
  TestDB.LoginPrompt := False;
  TestDB.ConnectionString := Format('Provider=SQLOLEDB.1;Password=master;Persist Security Info=True;'+
    'User ID=VIKARINA;Initial Catalog=%0:S;Data Source=FILE_SERVER'
    ,['ViktorDemo']);
  TestDB.Open();
  ConnectionFactory.RegisterFactoryMethod(dtMSSQL, TMSSQLEvents.GetConstructor() );

finalization
  if fIndex <> -1 then
  begin
    TestDB.Free;
  end;

  ODBC := nil;

{$ENDIF}

end.

