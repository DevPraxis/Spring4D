(* ORMTests - uModels.pas
* Created: 2012.05.15 15:54:01
* Copyright (c) 2012, Linas Naginionis
* Contacts: lnaginionis@gmail.com or support@soundvibe.net or linas@vikarina.lt
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*     * Redistributions of source code must retain the above copyright
*       notice, this list of conditions and the following disclaimer.
*     * Redistributions in binary form must reproduce the above copyright
*       notice, this list of conditions and the following disclaimer in the
*       documentation and/or other materials provided with the distribution.
*     * Neither the name of the <organization> nor the
*       names of its contributors may be used to endorse or promote products
*       derived from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY
* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
* DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*)

unit uModels;

interface

uses
  Mapping.Attributes, Generics.Collections, Core.Types, Graphics;

type
  TProduct = class;

  [Entity]
  [Table('Customers')]
  [Sequence('SEQ_CUST', 1, 1)]
  TCustomer = class
  private
    [UniqueConstraint]
    [Column('CUSTID', [cpRequired, cpDontInsert, cpPrimaryKey], 0, 0, 0, 'Primary Key')]
    [AutoGenerated]
    FId: Integer;
    [ManyValuedAssociation(ftLazy, False, [ctCascadeAll], 'FProduct')]
    [JoinColumn('PRODID', [], 'PRODID')]
    FProducts: Lazy<TObjectList<TProduct>>;
  private
    FName: string;
    FAge: Integer;
    FHeight: Double;
    FLastEdited: TDateTime;
    FEmail: string;
    FMiddleName: Nullable<string>;
    function GetProducts: TObjectList<TProduct>;
  public
    constructor Create();
    destructor Destroy; override;
  public
    property ID: Integer read FId;
    [Column('CUSTNAME', [], 50, 0, 0, 'Customers name')]
    property Name: string read FName write FName;
    [Column('CUSTAGE', [], 0, 0, 0, 'Customers age')]
    property Age: Integer read FAge write FAge;
    [Column('CUSTHEIGHT', [], 0, 1, 2, 'Customers height')]
    property Height: Double read FHeight write FHeight;
    [Column('LastEdited', [], 0, 0, 0, 'Last Edited')]
    property LastEdited: TDateTime read FLastEdited write FLastEdited;
    [Column('EMAIL', [], 0, 0, 0, 'E-mail address')]
    property EMail: string read FEmail write FEmail;
    [Column('MIDDLENAME', [], 50, 0, 0, 'Middle name')]
    property MiddleName: Nullable<string> read FMiddleName write FMiddleName;
    property Products: TObjectList<TProduct> read GetProducts;
  end;

  [Entity]
  [Table('IMONES', 'VIKARINA')]
  TCompany = class
  private
    [UniqueConstraint]
    [Column('IMONE', [cpRequired, cpPrimaryKey], 0, 0, 0, 'Primary Key')]
    FId: Integer;
    FName: string;
    FAddress: string;
    FTelephone: string;
    FLogo: TPicture;
    procedure SetLogo(const Value: TPicture);
  public
    constructor Create(); virtual;
    destructor Destroy; override;


    property ID: Integer read FId write FId;
    [Column('IMPAV', [], 50, 0, 0, 'Company name')]
    property Name: string read FName write FName;
    [Column('IMADR', [], 50, 0, 0, 'Company address')]
    property Address: string read FAddress write FAddress;
    [Column('IMTEL', [], 50, 0, 0, 'Company telephone number')]
    property Telephone: string read FTelephone write FTelephone;
    [Column('IMLOG', [], 0, 0, 0, 'Company logo')]
    property Logo: TPicture read FLogo write SetLogo;
  end;

  [Entity]
  [Table('DARSDLA', 'VIKARINA')]
  TWorker = class
  private
    [UniqueConstraint]
    [AutoGenerated]
    [Column('DARSNR', [cpRequired, cpDontInsert, cpPrimaryKey], 0, 0, 0, 'Primary Key')]
    FId: Integer;
    FName: string;
    FSurname: string;
    FTabNr: Integer;
    FStartDate: TDateTime;
    FEndDate: TDateTime;
    FLastEditedBy: string;
  public
    property ID: Integer read FId;
    [Column('VARD', [], 50, 0, 0, 'Worker name')]
    property Name: string read FName write FName;
    [Column('PAVARD', [], 50, 0, 0, 'Worker surname')]
    property Surname: string read FSurname write FSurname;
    [Column('TABNR', [], 0, 0, 0, 'Worker tab nr')]
    property TabNr: Integer read FTabNr write FTabNr;
    [Column('DARPRDT', [], 0, 0, 0, 'Worker start date')]
    property StartDate: TDateTime read FStartDate write FStartDate;
   // [Column('NUDATA', [], 0, 0, 0, 'Worker end date')]
    property EndDate: TDateTime read FEndDate write FEndDate;
    [Column('DARSKORV', [], 50, 0, 0, 'Last edited username')]
    property LastEditedBy: string read FLastEditedBy write FLastEditedBy;
  end;

  [Entity]
  [Table('Products')]
  TProduct = class
  private
    [Column('PRODID', [cpRequired], 0, 0, 0, 'Primary Key')]
    [AutoGenerated]
    FId: Integer;
  private
    FName: string;
    FPrice: Double;
  public
    property ID: Integer read FId;
    [Column('PRODNAME', [], 50, 0, 0, 'Product name')]
    property Name: string read FName write FName;
    [Column('PRODPRICE', [], 0, 12, 2, 'Product price')]
    property Price: Double read FPrice write FPrice;
  end;

implementation

{ TCustomer }

constructor TCustomer.Create;
begin
  inherited Create;
  FId := -1;
end;

destructor TCustomer.Destroy;
begin

  inherited Destroy;
end;

function TCustomer.GetProducts: TObjectList<TProduct>;
begin
  Result := FProducts.Value;
end;

{ TCompany }

constructor TCompany.Create;
begin
  inherited Create;
  FId := -1;
  FLogo := TPicture.Create;
end;

destructor TCompany.Destroy;
begin
  FLogo.Free;
  inherited Destroy;
end;

procedure TCompany.SetLogo(const Value: TPicture);
begin
  FLogo.Assign(Value);
end;

end.
