unit TestORMManager;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

{$I sv.inc}
interface

uses
  TestFramework, Windows, Forms, Dialogs, Controls, Classes, SysUtils,
  Variants, Graphics, Messages, StdCtrls, Core.EntityManager, Core.Interfaces
  ,uModels;

type

  TestTEntityManager = class(TTestCase)
  private
    FConnection: IDBConnection;
    FManager: TEntityManager;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure First();
    procedure Fetch();
    procedure Insert();
    procedure Update();
    procedure Delete();
  end;

  TInsertData = record
    Age: Integer;
    Name: string;
    Height: Double;
    Picture: TStream;
  end;

implementation

uses
  Adapters.SQLite
  ,Core.ConnectionFactory
  ,SQLiteTable3
  ,SQL.Register
  ,SvDesignPatterns
  {$IFDEF USE_SPRING} ,Spring.Collections {$ELSE} ,Generics.Collections {$ENDIF}

  ;

var
  TestDB: TSQLiteDatabase = nil;

const
  TBL_PEOPLE = 'CUSTOMERS';

procedure CreateTables();
begin
  TestDB.ExecSQL('CREATE TABLE IF NOT EXISTS '+ TBL_PEOPLE + ' ([CUSTID] INTEGER PRIMARY KEY, [CUSTAGE] INTEGER NULL,'+
    '[CUSTNAME] VARCHAR (255), [CUSTHEIGHT] FLOAT, [LastEdited] DATETIME, [EMAIL] TEXT); ');
  if not TestDB.TableExists(TBL_PEOPLE) then
    raise Exception.Create('Table CUSTOMERS does not exist');
end;

procedure InsertCustomer(AAge: Integer = 25; AName: string = 'Demo'; AHeight: Double = 15.25; APicture: TStream = nil);
begin
  TestDB.ExecSQL('INSERT INTO  ' + TBL_PEOPLE + ' ([CUSTAGE], [CUSTNAME], [CUSTHEIGHT]) VALUES (?,?,?);',
    [AAge, AName, AHeight]);
end;

procedure ClearTable(const ATableName: string);
begin
  TestDB.ExecSQL('DELETE FROM ' + ATableName + ';');
end;


procedure TestTEntityManager.Delete;
var
  LCustomer: TCustomer;
  sSql: string;
  LResults: ISQLiteTable;
begin
  sSql := 'select * from ' + TBL_PEOPLE;

  InsertCustomer();

  LCustomer := FManager.FirstOrDefault<TCustomer>(sSql, []);
  try
    CheckEquals(25, LCustomer.Age);

    FManager.Delete(LCustomer);

    LResults := TestDB.GetUniTableIntf('SELECT COUNT(*) FROM ' + TBL_PEOPLE);
    CheckEquals(0, LResults.Fields[0].AsInteger);

  finally
    LCustomer.Free;
  end;
end;

procedure TestTEntityManager.Fetch;
var
  LCollection: {$IFDEF USE_SPRING} Spring.Collections.ICollection<TCustomer> {$ELSE} TObjectList<TCustomer> {$ENDIF} ;
  LItems: {$IFDEF USE_SPRING} Spring.Collections.IList<TCustomer> {$ELSE} TObjectList<TCustomer> {$ENDIF};
  sSql: string;
begin
  sSql := 'SELECT * FROM ' + TBL_PEOPLE;
  {$IFDEF USE_SPRING}
  LItems := TCollections.CreateList<TCustomer>(True);
  {$ELSE}
  LItems := TObjectList<TCustomer>.Create(True);
  {$ENDIF}

  LCollection := LItems;

  FManager.Fetch<TCustomer>(sSql, [], LCollection);
  CheckEquals(0, LItems.Count);

  LItems.Clear;
  LCollection := LItems;

  InsertCustomer();
  FManager.Fetch<TCustomer>(sSql, [], LCollection);
  CheckEquals(1, LItems.Count);
  CheckEquals(25, LItems[0].Age);

  LItems.Clear;
  LCollection := LItems;

  InsertCustomer(15);
  FManager.Fetch<TCustomer>(sSql, [], LCollection);
  CheckEquals(2, LItems.Count);
  CheckEquals(15, LItems[1].Age);

  {$IFNDEF USE_SPRING}
  LItems.Free;
  {$ENDIF}
end;

procedure TestTEntityManager.First;
var
  LCustomer: TCustomer;
  sSql: string;
begin
  sSql := 'SELECT * FROM ' + TBL_PEOPLE;
  LCustomer := FManager.FirstOrDefault<TCustomer>(sSql, []);

  CheckTrue(System.Default(TCustomer) = LCustomer);

  InsertCustomer();

  LCustomer := FManager.First<TCustomer>(sSql, []);
  try
    CheckTrue(Assigned(LCustomer));
    CheckEquals(25, LCustomer.Age);
  finally
    FreeAndNil(LCustomer);
  end;
  InsertCustomer(15);

  LCustomer := FManager.First<TCustomer>(sSql, []);
  try
    CheckTrue(Assigned(LCustomer));
    CheckEquals(25, LCustomer.Age);
  finally
    FreeAndNil(LCustomer);
  end;

  sSql := sSql + ' WHERE [CUSTAGE] = :0 AND CUSTNAME=:1';
  LCustomer := FManager.First<TCustomer>(sSql, [15, 'Demo']);
  try
    CheckTrue(Assigned(LCustomer));
    CheckEquals(15, LCustomer.Age);
  finally
    FreeAndNil(LCustomer);
  end;
end;

procedure TestTEntityManager.Insert;
var
  LCustomer: TCustomer;
  LTable: ISQLiteTable;
  LID, LCount: Int64;
begin
  LCustomer := TCustomer.Create;
  try
    LCustomer.Name := 'Insert test';
    LCustomer.Age := 10;
    LCustomer.Height := 1.1;

    FManager.Insert(LCustomer);

    LTable := TestDB.GetUniTableIntf('select * from ' + TBL_PEOPLE);
    CheckEqualsString(LCustomer.Name, LTable.FieldByName['CUSTNAME'].AsString);
    CheckEquals(LCustomer.Age, LTable.FieldByName['CUSTAGE'].AsInteger);
    LID := LTable.FieldByName['CUSTID'].AsInteger;
    CheckEquals(LID, LCustomer.ID);
  finally
    LCustomer.Free;
  end;

  LCustomer := TCustomer.Create;
  try
    LCustomer.Name := 'Insert test 2';
    LCustomer.Age := 15;
    LCustomer.Height := 41.1;

    FManager.Insert(LCustomer);
    LTable := TestDB.GetUniTableIntf('select * from ' + TBL_PEOPLE + ' where [CUSTAGE] = 15;');
    CheckEqualsString(LCustomer.Name, LTable.FieldByName['CUSTNAME'].AsString);
    CheckEquals(LCustomer.Age, LTable.FieldByName['CUSTAGE'].AsInteger);
    LID := LTable.FieldByName['CUSTID'].AsInteger;
    CheckEquals(LID, LCustomer.ID);

    LCount := TestDB.GetUniTableIntf('select count(*) from ' + TBL_PEOPLE).Fields[0].AsInteger;
    CheckEquals(2, LCount);
  finally
    LCustomer.Free;
  end;
end;

procedure TestTEntityManager.SetUp;
begin
  TSQLGeneratorRegister.SetCurrentGenerator('SQLite3');
  FConnection := ConnectionFactory.GetInstance(dtSQLite);

  FManager := TEntityManager.Create(FConnection);
end;

procedure TestTEntityManager.TearDown;
begin
  ClearTable(TBL_PEOPLE);
  FManager.Free;
end;

procedure TestTEntityManager.Update;
var
  LCustomer: TCustomer;
  sSql: string;
  LResults: ISQLiteTable;
begin
  sSql := 'select * from ' + TBL_PEOPLE;

  InsertCustomer();

  LCustomer := FManager.FirstOrDefault<TCustomer>(sSql, []);
  try
    CheckEquals(25, LCustomer.Age);

    LCustomer.Age := 55;
    LCustomer.Name := 'Update Test';

    FManager.Update(LCustomer);

    LResults := TestDB.GetUniTableIntf('SELECT * FROM ' + TBL_PEOPLE);
    CheckEquals(LCustomer.Age, LResults.FieldByName['CUSTAGE'].AsInteger);
    CheckEqualsString(LCustomer.Name, LResults.FieldByName['CUSTNAME'].AsString);

  finally
    LCustomer.Free;
  end;
end;

type
  TSQLiteEvents = class
  public
    class procedure DoOnAfterOpen(Sender: TObject);
    class function GetConstructor: TFactoryMethod<IDBConnection>;
  end;

{ TSQLiteEvents }

class procedure TSQLiteEvents.DoOnAfterOpen(Sender: TObject);
begin
  CreateTables();
end;

class function TSQLiteEvents.GetConstructor: TFactoryMethod<IDBConnection>;
begin
  Result := function: IDBConnection
  begin
    Result := TSQLiteConnectionAdapter.Create(TestDB);

  end;
end;

initialization

  // Register any test cases with the test runner
  RegisterTest(TestTEntityManager.Suite);

  TestDB := TSQLiteDatabase.Create(':memory:');
  TestDB.OnAfterOpen := TSQLiteEvents.DoOnAfterOpen;
  CreateTables();

  ConnectionFactory.RegisterFactoryMethod(dtSQLite, TSQLiteEvents.GetConstructor() );

finalization
  TestDB.Free;

end.

