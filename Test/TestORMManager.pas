unit TestORMManager;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, Windows, Forms, Dialogs, Controls, Classes, SysUtils,
  Variants, Graphics, Messages, StdCtrls, Core.EntityManager, Core.Interfaces;

type

  TestTEntityManager = class(TTestCase)
  private
    FConnection: IDBConnection;
    FManager: TEntityManager;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  end;

implementation

uses
  Adapters.SQLite
  ,Core.ConnectionFactory
  ,SQLiteTable3
  ,SvDesignPatterns;

var
  TestDB: TSQLiteDatabase = nil;

const
  TBL_PEOPLE = 'PEOPLE';

procedure CreateTables();
begin
  TestDB.ExecSQL('CREATE TABLE IF NOT EXISTS '+ TBL_PEOPLE + ' ([ID] INTEGER PRIMARY KEY, [AGE] INTEGER NULL,'+
    '[NAME] VARCHAR (255), [HEIGHT] FLOAT, [PICTURE] BLOB); ');
  if not TestDB.TableExists('CUSTOMERS') then
    raise Exception.Create('Table CUSTOMERS does not exist');
end;


procedure TestTEntityManager.SetUp;
begin
  FConnection := ConnectionFactory.GetInstance(dtSQLite);

  FManager := TEntityManager.Create(FConnection);
end;

procedure TestTEntityManager.TearDown;
begin
  FManager.Free;
end;

type
  TSQLiteEvents = class
  public
    class procedure DoOnAfterOpen(Sender: TObject);
    class function GetConstructor: TFactoryMethod<IDBConnection>;
  end;

{ TSQLiteEvents }

class procedure TSQLiteEvents.DoOnAfterOpen(Sender: TObject);
begin
  CreateTables();
end;

class function TSQLiteEvents.GetConstructor: TFactoryMethod<IDBConnection>;
begin
  Result := function: IDBConnection
  begin
    Result := TSQLiteConnectionAdapter.Create(TestDB);
  end;
end;

initialization
  // Register any test cases with the test runner
  TestDB := TSQLiteDatabase.Create(':memory:');
  TestDB.OnAfterOpen := TSQLiteEvents.DoOnAfterOpen;

  RegisterTest(TestTEntityManager.Suite);
  ConnectionFactory.RegisterFactoryMethod(dtSQLite, TSQLiteEvents.GetConstructor() );

finalization
  TestDB.Free;

end.

