unit TestAdaptersASA;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Adapters.ASA, SysUtils, Adapters.ADO, ADODB, Core.Interfaces, uModels
  ,Generics.Collections, Core.EntityManager;

type
  // Test methods for class TASAConnectionAdapter

  TestTASAConnectionAdapter = class(TTestCase)
  strict private
    FASAConnectionAdapter: TASAConnectionAdapter;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestGetDriverName;
  end;
  // Test methods for class TASASQLGenerator

  TestTASASQLGenerator = class(TTestCase)
  strict private
    FASASQLGenerator: TASASQLGenerator;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestGetDriverName;
    procedure TestGenerateGetLastInsertId;
  end;

  TestASAAdapter = class(TTestCase)
  private
    FConnection: IDBConnection;
    FManager: TEntityManager;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestFirst();
  end;

implementation

uses
  Core.ConnectionFactory
  ,Core.DatabaseManager
  ,SvDesignPatterns
  ;

var
  TestDB: TADOConnection = nil;

const
  SQL_SELECT_ALL = 'SELECT * FROM VIKARINA.IMONES;';

procedure TestTASAConnectionAdapter.SetUp;
begin
  FASAConnectionAdapter := TASAConnectionAdapter.Create(TestDB);
end;

procedure TestTASAConnectionAdapter.TearDown;
begin
  FASAConnectionAdapter.Free;
  FASAConnectionAdapter := nil;
end;

procedure TestTASAConnectionAdapter.TestGetDriverName;
var
  ReturnValue: string;
begin
  ReturnValue := FASAConnectionAdapter.GetDriverName;
  CheckEqualsString('ASA', ReturnValue);
end;

procedure TestTASASQLGenerator.SetUp;
begin
  FASASQLGenerator := TASASQLGenerator.Create();
end;

procedure TestTASASQLGenerator.TearDown;
begin
  FASASQLGenerator.Free;
  FASASQLGenerator := nil;
end;

procedure TestTASASQLGenerator.TestGetDriverName;
var
  ReturnValue: string;
begin
  ReturnValue := FASASQLGenerator.GetDriverName;
  CheckEqualsString('ASA', ReturnValue);
end;

procedure TestTASASQLGenerator.TestGenerateGetLastInsertId;
var
  ReturnValue: string;
begin
  ReturnValue := FASASQLGenerator.GenerateGetLastInsertId(nil);
  CheckEqualsString('SELECT @@IDENTITY;', ReturnValue);
end;



type
  TASAEvents = class
  public
    class function GetConstructor: TFactoryMethod<IDBConnection>;
  end;

{ TMSSQLEvents }

class function TASAEvents.GetConstructor: TFactoryMethod<IDBConnection>;
begin
  Result := function: IDBConnection
  begin
    Result := TASAConnectionAdapter.Create(TestDB);
  end;
end;

var
  ODBC: IODBC;
  ODBCSources: TArray<string>;
  fIndex: Integer;


{ TestASAAdapter }

procedure TestASAAdapter.SetUp;
begin
  inherited;
  FConnection := ConnectionFactory.GetInstance(dtASA);
  FManager := TEntityManager.Create(FConnection);
end;

procedure TestASAAdapter.TearDown;
begin
  FManager.Free;
  inherited;
end;

procedure TestASAAdapter.TestFirst;
var
  LCompany: TCompany;
begin
  LCompany := FManager.FirstOrDefault<TCompany>(SQL_SELECT_ALL, []);
  try
    CheckTrue(Assigned(LCompany));
    CheckEquals(1, LCompany.ID);
  finally
    LCompany.Free;
  end;
end;

initialization
  ODBC := TBaseODBC.Create;
  ODBCSources := ODBC.GetDatasources();
  TArray.Sort<string>(ODBCSources);
  if not TArray.BinarySearch<string>(ODBCSources, 'demo_syb', fIndex) then
  begin
    fIndex := -1;
    Exit;
  end;
  RegisterTest(TestTASAConnectionAdapter.Suite);
  RegisterTest(TestTASASQLGenerator.Suite);
  RegisterTest(TestASAAdapter.Suite);

  TestDB := TADOConnection.Create(nil);
  TestDB.LoginPrompt := False;
  //
  TestDB.ConnectionString := 'Provider=MSDASQL;Data Source=demo_syb;Password=master;Persist Security Info=True;User ID=VIKARINA';
  TestDB.Open();
  ConnectionFactory.RegisterFactoryMethod(dtASA, TASAEvents.GetConstructor() );

finalization
  if fIndex <> -1 then
  begin
    TestDB.Free;
  end;

  ODBC := nil;


end.

