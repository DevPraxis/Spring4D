unit TestDatabaseManager;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, Core.AbstractManager, SysUtils, Core.Interfaces,
  Core.DatabaseManager;

type
  // Test methods for class TDatabaseManager

  TestTDatabaseManager = class(TTestCase)
  private
    FConnection: IDBConnection;
    FDatabaseManager: TDatabaseManager;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestBuildDatabase;
  end;

implementation

uses
  Core.ConnectionFactory
  ,uModels
  ;

const
  FILE_CONN_SQLITE = 'Conn_Sqlite.json';

function GetTableCount(const AConnection: IDBConnection): Integer;
var
  LStmt: IDBStatement;
begin
  LStmt := AConnection.CreateStatement;
  LStmt.SetSQLCommand('SELECT COUNT(*) FROM sqlite_master WHERE type=''table'';');
  Result := LStmt.ExecuteQuery.GetFieldValue(0);
end;

function GetTables(const AConnection: IDBConnection): string;
var
  LStmt: IDBStatement;
  LRes: IDBResultset;
begin
  Result := '';
  LStmt := AConnection.CreateStatement;
  LStmt.SetSQLCommand('SELECT name FROM sqlite_master WHERE type=''table'';');
  LRes := LStmt.ExecuteQuery;
  while not LRes.IsEmpty do
  begin
    Result := Result + LRes.GetFieldValue(0) + ' ';

    LRes.Next;
  end;
end;


procedure TestTDatabaseManager.SetUp;
var
  sDir: string;
begin
  inherited;
  sDir := IncludeTrailingPathDelimiter(ExtractFileDir(PictureFilename));
  FConnection := TConnectionFactory.GetInstanceFromFilename(dtSQLite, sDir + FILE_CONN_SQLITE);
  FDatabaseManager := TDatabaseManager.Create(FConnection);
end;

procedure TestTDatabaseManager.TearDown;
begin
  FConnection := nil;
  FDatabaseManager.Free;
  inherited;
end;

procedure TestTDatabaseManager.TestBuildDatabase;
var
  sTables: string;
  iCount: Integer;
begin
  CheckEquals(0, GetTableCount(FConnection));
  FDatabaseManager.BuildDatabase;

  iCount := 3;

  sTables := GetTables(FConnection);
  if Pos('sqlite_sequence', sTables) > 0 then
  begin
    Inc(iCount);
  end;

  CheckEquals(iCount, GetTableCount(FConnection));
end;


initialization
  // Register any test cases with the test runner
  RegisterTest(TestTDatabaseManager.Suite);




end.

