{***************************************************************************}
{                                                                           }
{           Spring Framework for Delphi                                     }
{                                                                           }
{           Copyright (c) 2009-2014 Spring4D Team                           }
{                                                                           }
{           http://www.spring4d.org                                         }
{                                                                           }
{***************************************************************************}
{                                                                           }
{  Licensed under the Apache License, Version 2.0 (the "License");          }
{  you may not use this file except in compliance with the License.         }
{  You may obtain a copy of the License at                                  }
{                                                                           }
{      http://www.apache.org/licenses/LICENSE-2.0                           }
{                                                                           }
{  Unless required by applicable law or agreed to in writing, software      }
{  distributed under the License is distributed on an "AS IS" BASIS,        }
{  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. }
{  See the License for the specific language governing permissions and      }
{  limitations under the License.                                           }
{                                                                           }
{***************************************************************************}

{$I Spring.inc}

unit Spring.Persistence.SQL.Commands.Insert;

interface

uses
  Spring.Collections,
  Spring.Persistence.Core.EntityCache,
  Spring.Persistence.Core.Interfaces,
  Spring.Persistence.Mapping.Attributes,
  Spring.Persistence.SQL.Commands.Abstract,
  Spring.Persistence.SQL.Types,
  Spring.Persistence.SQL.Commands,
  Spring.Persistence.SQL.Params;

type
  /// <summary>
  ///   Responsible for building and executing <c>insert</c> statements.
  /// </summary>
  TInsertExecutor = class(TAbstractCommandExecutor)
  private
    fTable: TSQLTable;
    fCommand: TInsertCommand;
    fColumns: IList<ColumnAttribute>;
    fAutoGeneratedName: string;
    fLastInsertIdSQL: string;
    fGetSequenceValueSQL: string;
    fClientAutoGeneratedValue: Variant;
  protected
    function CanGetIdentity: Boolean; virtual;
    function CanGetSequenceValue: Boolean; virtual;
    function CanClientAutogenerateValue: Boolean; virtual;
    function GetCommand: TDMLCommand; override;
    function GetPrimaryKeyColumn: ColumnAttribute; virtual;
    function GetClientAutogenerateValue: Variant; virtual;
    function GetInsertCommand: TInsertCommand; virtual;
  public
    constructor Create; override;
    destructor Destroy; override;

    procedure BuildParams(const entity: TObject); override;

    procedure Build(entityClass: TClass); override;
    procedure Execute(const entity: TObject); override;
    procedure LoadIdFromSequence(const entity: TObject;
      const resultSet: IDBResultSet);

    property SQLTable: TSQLTable read fTable;
  end;

implementation

uses
  SysUtils,
  Variants,
  Spring,
  Spring.Persistence.Core.Exceptions,
  Spring.Persistence.Mapping.RttiExplorer;


{$REGION 'TInsertCommand'}

constructor TInsertExecutor.Create;
begin
  inherited Create;
  fColumns := TCollections.CreateList<ColumnAttribute>;
  fClientAutoGeneratedValue := Null;
  fTable := TSQLTable.Create;
  fCommand := TInsertCommand.Create(fTable);
end;

destructor TInsertExecutor.Destroy;
begin
  fCommand.Free;
  fTable.Free;
  inherited Destroy;
end;

procedure TInsertExecutor.Build(entityClass: TClass);
begin
  inherited Build(entityClass);
  if not EntityData.IsTableEntity then
    raise ETableNotSpecified.CreateFmt('Table not specified for class "%S"', [entityClass.ClassName]);

  fTable.SetFromAttribute(EntityData.EntityTable);

  fColumns.Clear;
  fColumns.AddRange(EntityData.Columns);

  fAutoGeneratedName := TRttiExplorer.GetAutoGeneratedColumnMemberName(EntityClass);
   // add fields to tsqltable
  fCommand.Sequence := EntityData.Sequence;
  fCommand.SetCommandFieldsFromColumns(fColumns);

  if EntityData.HasSequence then
  begin
    if EntityData.Sequence.SequenceSQL <> '' then
      fGetSequenceValueSQL := EntityData.Sequence.SequenceSQL
    else
      fGetSequenceValueSQL := Generator.GenerateGetNextSequenceValue(EntityData.Sequence);

    if fGetSequenceValueSQL <> '' then
      fCommand.InsertFields.Add(TSQLField.Create(EntityData.PrimaryKeyColumn.ColumnName, fTable));
  end;

  SQL := Generator.GenerateInsert(fCommand);

  if EntityData.PrimaryKeyColumn.IsIdentity then
  begin
    fLastInsertIdSQL := Generator.GenerateGetLastInsertId(EntityData.PrimaryKeyColumn);
    fClientAutoGeneratedValue := Generator.GenerateUniqueId;
  end;
end;

procedure TInsertExecutor.BuildParams(const entity: TObject);
var
  LParam: TDBParam;
  LColumn: ColumnAttribute;
begin
  inherited BuildParams(entity);
  fCommand.Entity := entity;
  
  for LColumn in fColumns do
    if not LColumn.IsIdentity and LColumn.CanInsert then
    begin
      LParam := CreateParam(entity, LColumn);
      SQLParameters.Add(LParam);
    end;
end;

function TInsertExecutor.CanClientAutogenerateValue: Boolean;
begin
  Result := not VarIsNull(fClientAutoGeneratedValue);
end;

function TInsertExecutor.CanGetIdentity: Boolean;
begin
  Result := fLastInsertIdSQL <> '';
end;

function TInsertExecutor.CanGetSequenceValue: Boolean;
begin
  Result := fGetSequenceValueSQL <> '';
end;

procedure TInsertExecutor.Execute(const entity: TObject);
var
  LStmt: IDBStatement;
  LSequenceValue: Variant;
  LResultset: IDBResultSet;
  LSql: string;
begin
  Assert(Assigned(entity));

  if EntityData.HasVersionColumn then
  begin
    // set version column value to 0
    TRttiExplorer.SetMemberValueSimple(entity, EntityData.VersionColumn.MemberName, 0);
  end;

  LStmt := Connection.CreateStatement;

  if CanGetSequenceValue then
  begin
    // retrieve identity value from the sequence
    LStmt.SetSQLCommand(fGetSequenceValueSQL);
    LSequenceValue := LStmt.ExecuteQuery.GetFieldValue(0);
  end;

  LSql := SQL;
  if CanGetIdentity then
    LSql := SQL + #13#10 +  ' ' + fLastInsertIdSQL;

  LStmt.SetSQLCommand(LSql);

  BuildParams(entity);

  if CanGetSequenceValue then
  begin
    // add sequence param value
    SQLParameters.Add(DoCreateParam(EntityData.PrimaryKeyColumn.ColumnName, LSequenceValue));
  end;

  if CanClientAutogenerateValue then
    TRttiExplorer.SetMemberValue(entity, EntityData.PrimaryKeyColumn,
      TValue.FromVariant(Generator.GenerateUniqueId));

  try
    LStmt.SetParams(SQLParameters);
    if Trim(LSql) = '' then
    begin
      LSql := Generator.GenerateInsert(fCommand);
      LStmt.SetSQLCommand(LSql);
    end;

    if not CanGetIdentity then
      LStmt.Execute
    else // we must use client side cursor because ADO incorrectly fetches identity value with server side cursor
      LResultset := LStmt.ExecuteQuery(False);

    LoadIdFromSequence(entity, LResultset);

    if CanGetSequenceValue then
      TRttiExplorer.SetMemberValue(entity, EntityData.PrimaryKeyColumn, TValue.FromVariant(LSequenceValue));
  finally
    LStmt := nil;
    LResultset := nil;
  end;
end;

function TInsertExecutor.GetClientAutogenerateValue: Variant;
begin
  Result := fClientAutoGeneratedValue;
end;

function TInsertExecutor.GetCommand: TDMLCommand;
begin
  Result := fCommand;
end;

function TInsertExecutor.GetInsertCommand: TInsertCommand;
begin
  Result := fCommand;
end;

function TInsertExecutor.GetPrimaryKeyColumn: ColumnAttribute;
begin
  Result := EntityData.PrimaryKeyColumn;
end;

procedure TInsertExecutor.LoadIdFromSequence(const entity: TObject;
  const resultSet: IDBResultSet);
var
  LID: Variant;
  LStmt: IDBStatement;
  LResultset: IDBResultSet;
begin
  if not CanGetIdentity then
    Exit;

  LResultset := resultSet;

  if LResultset.IsEmpty then
  begin
    LStmt := Connection.CreateStatement;
    LStmt.SetSQLCommand(fLastInsertIdSQL);
    LResultset := LStmt.ExecuteQuery;
    if LResultset.IsEmpty then
      Exit;
  end;

  LID := LResultset.GetFieldValue(0);
  TRttiExplorer.SetMemberValue(entity, fAutoGeneratedName, TValue.FromVariant(LID));
end;

{$ENDREGION}


end.
