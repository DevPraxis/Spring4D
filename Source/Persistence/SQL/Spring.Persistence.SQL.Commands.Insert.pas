{***************************************************************************}
{                                                                           }
{           Spring Framework for Delphi                                     }
{                                                                           }
{           Copyright (c) 2009-2014 Spring4D Team                           }
{                                                                           }
{           http://www.spring4d.org                                         }
{                                                                           }
{***************************************************************************}
{                                                                           }
{  Licensed under the Apache License, Version 2.0 (the "License");          }
{  you may not use this file except in compliance with the License.         }
{  You may obtain a copy of the License at                                  }
{                                                                           }
{      http://www.apache.org/licenses/LICENSE-2.0                           }
{                                                                           }
{  Unless required by applicable law or agreed to in writing, software      }
{  distributed under the License is distributed on an "AS IS" BASIS,        }
{  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. }
{  See the License for the specific language governing permissions and      }
{  limitations under the License.                                           }
{                                                                           }
{***************************************************************************}

{$I Spring.inc}

unit Spring.Persistence.SQL.Commands.Insert;

interface

uses
  Spring,
  Spring.Collections,
  Spring.Persistence.Core.EntityCache,
  Spring.Persistence.Core.EntityWrapper,
  Spring.Persistence.Core.Interfaces,
  Spring.Persistence.Mapping.Attributes,
  Spring.Persistence.SQL.Commands.Abstract,
  Spring.Persistence.SQL.Types,
  Spring.Persistence.SQL.Commands,
  Spring.Persistence.SQL.Params;

type
  /// <summary>
  ///   Responsible for building and executing <c>insert</c> statements.
  /// </summary>
  TInsertExecutor = class(TAbstractCommandExecutor)
  private
    fTable: TSQLTable;
    fCommand: TInsertCommand;
    fColumns: IList<ColumnAttribute>;
    fLastInsertIdSQL: string;
    fGetSequenceValueSQL: string;
    fClientAutoGeneratedValue: Variant;
  protected
    function SupportsIdentityColumn: Boolean; virtual;
    function SupportsSequences: Boolean; virtual;
    function CanClientAutogenerateValue: Boolean; virtual;
    function GetCommand: TDMLCommand; override;

    function GetAutogeneratedPrimaryKeyValue(const entityWrapper: IEntityWrapper): TValue;
    function GetInsertQueryText: string;
    function GetIdentityValue(const resultSet: IDBResultSet): TValue;

    function ResolveGetSequenceSQL: string;
  public
    constructor Create; override;
    destructor Destroy; override;

    procedure BuildParams(const entity: TObject); override;

    procedure Build(entityClass: TClass); override;
    procedure Execute(const entityWrapper: IEntityWrapper);

    property InsertCommand: TInsertCommand read fCommand;
    property Table: TSQLTable read FTable;
  end;

implementation

uses
  SysUtils,
  Variants,
  Spring.Reflection,
  Spring.Persistence.Core.Exceptions;


{$REGION 'TInsertCommand'}

constructor TInsertExecutor.Create;
begin
  inherited Create;
  fColumns := TCollections.CreateList<ColumnAttribute>;
  fClientAutoGeneratedValue := Null;
  fTable := TSQLTable.Create;
  fCommand := TInsertCommand.Create(fTable);
end;

destructor TInsertExecutor.Destroy;
begin
  fCommand.Free;
  fTable.Free;
  inherited Destroy;
end;



procedure TInsertExecutor.Build(entityClass: TClass);
begin
  inherited Build(entityClass);
  if not EntityData.IsTableEntity then
    raise ETableNotSpecified.CreateFmt('Table not specified for class "%S"', [entityClass.ClassName]);

  fTable.SetFromAttribute(EntityData.EntityTable);
  fColumns.AddRange(EntityData.Columns);
   // add fields to tsqltable
  fCommand.Sequence := EntityData.Sequence;
  fCommand.SetCommandFieldsFromColumns(fColumns);

  if EntityData.HasSequence then
  begin
    fGetSequenceValueSQL := ResolveGetSequenceSQL;
    if fGetSequenceValueSQL <> '' then
    begin
      if not fCommand.InsertFields.Any(function(const value: TSQLInsertField): Boolean
        begin
          Result := value.Column = EntityData.PrimaryKeyColumn;
        end)
      then
        fCommand.InsertFields.Add(
          TSQLInsertField.Create(
            EntityData.PrimaryKeyColumn.ColumnName,
            fTable, EntityData.PrimaryKeyColumn,
            fCommand.GetAndIncParameterName(EntityData.PrimaryKeyColumn.ColumnName)));
    end;
  end;

  SQL := Generator.GenerateInsert(fCommand);

  if EntityData.PrimaryKeyColumn.IsIdentity then
  begin
    fLastInsertIdSQL := Generator.GenerateGetLastInsertId(EntityData.PrimaryKeyColumn);
    fClientAutoGeneratedValue := Generator.GenerateUniqueId;
  end;
end;

procedure TInsertExecutor.BuildParams(const entity: TObject);
var
  LParam: TDBParam;
  LInsertField: TSQLInsertField;
begin
  inherited BuildParams(entity);
  fCommand.Entity := entity;

  for LInsertField in fCommand.InsertFields do
  begin
    LParam := CreateParam(entity, LInsertField);
    SQLParameters.Add(LParam);
  end;
end;

function TInsertExecutor.CanClientAutogenerateValue: Boolean;
begin
  Result := not VarIsNull(fClientAutoGeneratedValue);
end;

function TInsertExecutor.SupportsIdentityColumn: Boolean;
begin
  Result := fLastInsertIdSQL <> '';
end;

function TInsertExecutor.SupportsSequences: Boolean;
begin
  Result := fGetSequenceValueSQL <> '';
end;

procedure TInsertExecutor.Execute(const entityWrapper: IEntityWrapper);
var
  statement: IDBStatement;
  resultSet: IDBResultSet;
  queryText: string;
  value: TValue;
begin
  if EntityData.HasVersionColumn then
    entityWrapper.SetColumnValue(EntityData.VersionColumn, EntityData.VersionColumn.InitialValue);

  value := GetAutogeneratedPrimaryKeyValue(entityWrapper);
  if not value.IsEmpty then
    entityWrapper.SetPrimaryKeyValue(value);

  BuildParams(entityWrapper.GetEntity);
  queryText := GetInsertQueryText;
  statement := Connection.CreateStatement;
  statement.SetSQLCommand(queryText);
  statement.SetParams(SQLParameters);
  resultSet := statement.ExecuteQuery(false);
  value := GetIdentityValue(resultSet);
  if not value.IsEmpty then
    entityWrapper.SetPrimaryKeyValue(value);
end;

function TInsertExecutor.GetInsertQueryText: string;
begin
  Result := SQL;
  if Result = '' then
    Result := Generator.GenerateInsert(fCommand);

  if SupportsIdentityColumn then
    Result := Result + #13#10 + ' ' + fLastInsertIdSQL;
end;

function TInsertExecutor.ResolveGetSequenceSQL: string;
begin
  if EntityData.Sequence.SequenceSQL <> '' then
    Result := EntityData.Sequence.SequenceSQL
  else
    Result := Generator.GenerateGetNextSequenceValue(EntityData.Sequence);
end;

function TInsertExecutor.GetIdentityValue(const resultSet: IDBResultSet): TValue;
var
  newResultSet: IDBResultSet;
  statement: IDBStatement;
begin
  Result := TValue.Empty;
  if not SupportsIdentityColumn then
    Exit;
  newResultSet := resultSet;
  if newResultSet.IsEmpty then
  begin
    statement := Connection.CreateStatement;
    statement.SetSQLCommand(fLastInsertIdSQL);
    newResultSet := statement.ExecuteQuery(false);
  end;

  if not newResultSet.IsEmpty then
    Result := TValue.FromVariant(newResultSet.GetFieldValue(0));
end;

function TInsertExecutor.GetAutogeneratedPrimaryKeyValue(
  const entityWrapper: IEntityWrapper): TValue;
var
  statement: IDBStatement;
  value: Variant;
begin
  Result := TValue.Empty;
  if SupportsSequences then
  begin
    statement := Connection.CreateStatement;
    statement.SetSQLCommand(fGetSequenceValueSQL);
    value := statement.ExecuteQuery.GetFieldValue(0);
    Result := TValue.FromVariant(value);
  end
  else if CanClientAutogenerateValue then
  begin
    Result := TValue.FromVariant(Generator.GenerateUniqueId);
    fCommand.InsertFields.Add(
      TSQLInsertField.Create(
        EntityData.PrimaryKeyColumn.ColumnName,
        fTable, EntityData.PrimaryKeyColumn,
        fCommand.GetAndIncParameterName(EntityData.PrimaryKeyColumn.ColumnName)));
  end;
end;

function TInsertExecutor.GetCommand: TDMLCommand;
begin
  Result := fCommand;
end;

{$ENDREGION}


end.
