{***************************************************************************}
{                                                                           }
{           Spring Framework for Delphi                                     }
{                                                                           }
{           Copyright (c) 2009-2014 Spring4D Team                           }
{                                                                           }
{           http://www.spring4d.org                                         }
{                                                                           }
{***************************************************************************}
{                                                                           }
{  Licensed under the Apache License, Version 2.0 (the "License");          }
{  you may not use this file except in compliance with the License.         }
{  You may obtain a copy of the License at                                  }
{                                                                           }
{      http://www.apache.org/licenses/LICENSE-2.0                           }
{                                                                           }
{  Unless required by applicable law or agreed to in writing, software      }
{  distributed under the License is distributed on an "AS IS" BASIS,        }
{  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. }
{  See the License for the specific language governing permissions and      }
{  limitations under the License.                                           }
{                                                                           }
{***************************************************************************}

unit Spring.Persistence.SQL.Commands.Insert;

interface

uses
  Spring.Collections,
  Spring.Persistence.Core.EntityCache,
  Spring.Persistence.Core.Interfaces,
  Spring.Persistence.Mapping.Attributes,
  Spring.Persistence.SQL.Commands.Abstract,
  Spring.Persistence.SQL.Types,
  Spring.Persistence.SQL.Commands,
  Spring.Persistence.SQL.Params;

type
  {$REGION 'Documentation'}
  ///	<summary>
  ///	  Responsible for building and executing <c>insert</c> statements.
  ///	</summary>
  {$ENDREGION}
  TInsertExecutor = class(TAbstractCommandExecutor)
  private
    FTable: TSQLTable;
    FCommand: TInsertCommand;
    FColumns: IList<ColumnAttribute>;
    FAutoGeneratedName: string;
    FLastInsertIdSQL: string;
    FGetSequenceValueSQL: string;
    FPrimaryKeyColumn: ColumnAttribute;
    FClientAutogeneratedValue: Variant;
    FEntityData: TEntityData;
  protected
    function CanGetIdentity: Boolean; virtual;
    function CanGetSequenceValue: Boolean; virtual;
    function CanClientAutogenerateValue: Boolean; virtual;
    function GetCommand: TDMLCommand; override;
    function GetPrimaryKeyColumn: ColumnAttribute; virtual;
    function GetClientAutogenerateValue: Variant; virtual;
    function GetInsertCommand: TInsertCommand; virtual;
  public
    constructor Create; override;
    destructor Destroy; override;

    procedure BuildParams(AEntity: TObject); override;

    procedure Build(AClass: TClass); override;
    procedure Execute(AEntity: TObject); override;
    procedure LoadIdFromSequence(AEntity: TObject; AResultset: IDBResultset);


    property SQLTable: TSQLTable read FTable;
  end;

implementation

uses
  SysUtils,
  Variants,
  Spring,
  Spring.Persistence.Core.Exceptions,
  Spring.Persistence.Mapping.RttiExplorer;

{ TInsertCommand }

procedure TInsertExecutor.Build(AClass: TClass);
var
  LAtrTable: TableAttribute;
begin
  EntityClass := AClass;
  FEntityData := TEntityCache.Get(AClass);
  LAtrTable := FEntityData.EntityTable;
  if not Assigned(LAtrTable) then
    raise ETableNotSpecified.CreateFmt('Table not specified for class "%S"', [AClass.ClassName]);

  FTable.SetFromAttribute(LAtrTable);

  FColumns.Clear;
  FColumns.AddRange(FEntityData.Columns);

  FPrimaryKeyColumn := FEntityData.PrimaryKeyColumn;
  FAutoGeneratedName := TRttiExplorer.GetAutoGeneratedColumnMemberName(EntityClass);
   //add fields to tsqltable
  FCommand.Sequence := FEntityData.Sequence;
  FCommand.SetCommandFieldsFromColumns(FColumns);

  if FEntityData.HasSequence then
  begin
    if (FEntityData.Sequence.SeqSQL <> '') then
      FGetSequenceValueSQL := FEntityData.Sequence.SeqSQL
    else
      FGetSequenceValueSQL := Generator.GenerateGetNextSequenceValue(FEntityData.Sequence);

    if (FGetSequenceValueSQL <> '') then
      FCommand.InsertFields.Add(TSQLField.Create(FEntityData.PrimaryKeyColumn.Name, FTable));
  end;

  SQL := Generator.GenerateInsert(FCommand);

  if FEntityData.PrimaryKeyColumn.IsIdentity then
  begin
    FLastInsertIdSQL := Generator.GenerateGetLastInsertId(FEntityData.PrimaryKeyColumn);
    FClientAutogeneratedValue := Generator.GenerateUniqueId;
  end;
end;

procedure TInsertExecutor.BuildParams(AEntity: TObject);
var
  LParam: TDBParam;
  LColumn: ColumnAttribute;
begin
  inherited BuildParams(AEntity);
  FCommand.Entity := AEntity;
  
  for LColumn in FColumns do
  begin
    if not LColumn.IsIdentity {SameText(FAutoGeneratedName, LColumn.ClassMemberName)} and (LColumn.CanInsert) then
    begin
      LParam := CreateParam(AEntity, LColumn);
      SQLParameters.Add(LParam);
    end;
  end;
end;

function TInsertExecutor.CanClientAutogenerateValue: Boolean;
begin
  Result := not VarIsNull(FClientAutogeneratedValue);
end;

function TInsertExecutor.CanGetIdentity: Boolean;
begin
  Result := (FLastInsertIdSQL <> '');
end;

function TInsertExecutor.CanGetSequenceValue: Boolean;
begin
  Result := (FGetSequenceValueSQL <> '');
end;

constructor TInsertExecutor.Create;
begin
  inherited Create;
  FTable := TSQLTable.Create;
  FCommand := TInsertCommand.Create(FTable);
  FColumns := TCollections.CreateList<ColumnAttribute>;
  FAutoGeneratedName := '';
  FLastInsertIdSQL := '';
  FGetSequenceValueSQL := '';
  FPrimaryKeyColumn := nil;
  FClientAutogeneratedValue := Null;
end;

destructor TInsertExecutor.Destroy;
begin
  FTable.Free;
  FCommand.Free;
  inherited Destroy;
end;

procedure TInsertExecutor.Execute(AEntity: TObject);
var
  LStmt: IDBStatement;
  LSequenceValue: Variant;
  LResultset: IDBResultset;
  LSql: string;
begin
  Assert(Assigned(AEntity));

  if FEntityData.HasVersionColumn then
  begin
    //set version column value to 0
    TRttiExplorer.SetMemberValueSimple(AEntity, FEntityData.VersionColumn.ClassMemberName, 0);
  end;

  LStmt := Connection.CreateStatement;

  if CanGetSequenceValue then
  begin
    //retrieve identity value from the sequence
    LStmt.SetSQLCommand(FGetSequenceValueSQL);
    LSequenceValue := LStmt.ExecuteQuery.GetFieldValue(0);
  end;

  LSql := SQL;
  if CanGetIdentity then
    LSql := SQL + #13#10 +  ' ' + FLastInsertIdSQL;

  LStmt.SetSQLCommand(LSql);

  BuildParams(AEntity);

  if CanGetSequenceValue then
  begin
    //add sequence param value
    SQLParameters.Add(DoCreateParam(FPrimaryKeyColumn, LSequenceValue));
  end;

  if CanClientAutogenerateValue then
    TRttiExplorer.SetMemberValue(nil, AEntity, FPrimaryKeyColumn, TValue.FromVariant(FClientAutogeneratedValue));

  try
    LStmt.SetParams(SQLParameters);
    if Trim(LSql) = '' then
    begin
      LSql := Generator.GenerateInsert(FCommand);
      LStmt.SetSQLCommand(LSql);
    end;

    if not CanGetIdentity then
      LStmt.Execute
    else  //we must use client side cursor because ADO incorrectly fetches identity value with server side cursor
      LResultset := LStmt.ExecuteQuery(False);

    LoadIdFromSequence(AEntity, LResultset);

    if CanGetSequenceValue then
    begin
      TRttiExplorer.SetMemberValue(nil, AEntity, FPrimaryKeyColumn, TValue.FromVariant(LSequenceValue));
    end;

  finally
    LStmt := nil;
    LResultset := nil;
  end;
end;

function TInsertExecutor.GetClientAutogenerateValue: Variant;
begin
  Result := FClientAutogeneratedValue;
end;

function TInsertExecutor.GetCommand: TDMLCommand;
begin
  Result := FCommand;
end;

function TInsertExecutor.GetInsertCommand: TInsertCommand;
begin
  Result := FCommand;
end;

function TInsertExecutor.GetPrimaryKeyColumn: ColumnAttribute;
begin
  Result := FPrimaryKeyColumn;
end;

procedure TInsertExecutor.LoadIdFromSequence(AEntity: TObject; AResultset: IDBResultset);
var
  LID: Variant;
  LStmt: IDBStatement;
  LResultset: IDBResultset;
begin
  if not CanGetIdentity then
    Exit;

  LResultset := AResultset;

  if LResultset.IsEmpty then
  begin
    LStmt := Connection.CreateStatement;
    LStmt.SetSQLCommand(FLastInsertIdSQL);
    LResultset := LStmt.ExecuteQuery;
    if LResultset.IsEmpty then
      Exit;
  end;

  LID := LResultset.GetFieldValue(0);
  TRttiExplorer.SetMemberValue(nil, AEntity, FAutoGeneratedName, TValue.FromVariant(LID));
end;

end.
