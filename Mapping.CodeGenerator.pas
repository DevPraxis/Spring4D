unit Mapping.CodeGenerator;

interface

uses
  Mapping.CodeGenerator.Abstract
  ,SysUtils
  ;

type
  TDelphiUnitCodeGenerator = class(TAbstractCodeGenerator)
  private
    FBuilder: TStringBuilder;
  protected
    function AddTypeAttribute(const AAtributeText: string): TStringBuilder; virtual;
    function AddClassAttribute(const AAtributeText: string): TStringBuilder; virtual;

    function AddUnit(const AUnitName: string): TStringBuilder; virtual;
    function AddPrivateField(AColumnData: TColumnData): TStringBuilder; virtual;
    function AddPublicProperty(AColumnData: TColumnData): TStringBuilder; virtual;
    function AddEntityDeclaration(AEntityData: TEntityModelData): TStringBuilder; virtual;

    function GetPrivateFieldName(AColumnData: TColumnData): string; virtual;
    function GetColumnAttributeText(AColumnData: TColumnData): string; virtual;
    function GetColumnProperties(AColumnData: TColumnData): string; virtual;

    function DoGenerate(AEntityData: TEntityModelData): string; override;
  public
    constructor Create(); virtual;
    destructor Destroy; override;

    function Generate(AEntityData: TEntityModelData): string;
  end;

implementation

const
  UNIT_ATTRIBUTES = 'Mapping.Attributes';
  UNIT_TYPES = 'Core.Types';
  UNIT_GRAPHICS = 'Graphics';

{ TEntityCodeGenerator }

function TDelphiUnitCodeGenerator.AddTypeAttribute(const AAtributeText: string): TStringBuilder;
begin
  Result := FBuilder.AppendLine.Append(GetIndent).Append(AAtributeText);
end;

function TDelphiUnitCodeGenerator.AddClassAttribute(const AAtributeText: string): TStringBuilder;
begin
  Result := FBuilder.AppendLine.Append(GetIndent).Append(GetIndent).Append(AAtributeText);
end;

function TDelphiUnitCodeGenerator.AddEntityDeclaration(AEntityData: TEntityModelData): TStringBuilder;
begin
  //add attribute
  AddTypeAttribute('[Entity]');
  AddTypeAttribute(Format('[Table(%0:S, %1:S)]', [QuotedStr(AEntityData.TableName), QuotedStr(AEntityData.SchemaName)]));

  FBuilder.AppendLine.Append(GetIndent);

  Result := FBuilder.Append(GetEntityTypePrefix).Append(AEntityData.TableName).Append(' = class');
end;

function TDelphiUnitCodeGenerator.AddPrivateField(AColumnData: TColumnData): TStringBuilder;
begin
  Result := FBuilder.AppendLine.Append(GetIndent).Append(GetIndent).Append(GetPrivateFieldName(AColumnData))
    .Append(': ').Append(AColumnData.ColumnTypeName).Append(';');
end;

function TDelphiUnitCodeGenerator.AddPublicProperty(AColumnData: TColumnData): TStringBuilder;
begin
  if AColumnData.IsAutogenerated then
  begin
    AddClassAttribute('[AutoGenerated]');
  end;

  AddClassAttribute(GetColumnAttributeText(AColumnData));

  Result := FBuilder.AppendLine.Append(GetIndent).Append(GetIndent).Append('property ')
    .Append(AColumnData.ColumnName).Append(': ').Append(AColumnData.ColumnTypeName)
    .Append(' read ').Append(GetPrivateFieldName(AColumnData)).Append(' write ')
    .Append(GetPrivateFieldName(AColumnData)).Append(';');
end;

function TDelphiUnitCodeGenerator.AddUnit(const AUnitName: string): TStringBuilder;
begin
  Result := FBuilder.AppendLine.Append(GetIndent).Append(',').Append(AUnitName);
end;

constructor TDelphiUnitCodeGenerator.Create;
begin
  inherited Create;
  FBuilder := TStringBuilder.Create;
end;

destructor TDelphiUnitCodeGenerator.Destroy;
begin
  FBuilder.Free;
  inherited Destroy;
end;

function TDelphiUnitCodeGenerator.DoGenerate(AEntityData: TEntityModelData): string;
var
  LColumnData: TColumnData;
begin
  FBuilder.Clear;

  FBuilder.AppendFormat('unit %S;', [AEntityData.GetUnitName]).AppendLine.AppendLine;

  FBuilder.Append('interface').AppendLine.AppendLine;

  FBuilder.Append('uses').AppendLine.Append(GetIndent).Append(UNIT_ATTRIBUTES);
  AddUnit(UNIT_TYPES);
  AddUnit(UNIT_GRAPHICS);
  FBuilder.AppendLine.Append(GetIndent).Append(';');

  FBuilder.AppendLine.AppendLine;

  FBuilder.Append('type');

  AddEntityDeclaration(AEntityData);

  //add private fields
  FBuilder.AppendLine.Append(GetIndent).Append('private');

  for LColumnData in AEntityData.Columns do
  begin
    AddPrivateField(LColumnData);
  end;

  //add public properties

  FBuilder.AppendLine.Append(GetIndent).Append('public');

  for LColumnData in AEntityData.Columns do
  begin
    AddPublicProperty(LColumnData);
  end;

  FBuilder.AppendLine.Append(GetIndent).Append('end').Append(';');

  FBuilder.AppendLine.AppendLine.Append('implementation');

  FBuilder.AppendLine.AppendLine.Append('end').Append('.');

  Result := FBuilder.ToString;
end;

function TDelphiUnitCodeGenerator.Generate(AEntityData: TEntityModelData): string;
begin
  Result := DoGenerate(AEntityData);
end;

function TDelphiUnitCodeGenerator.GetColumnAttributeText(AColumnData: TColumnData): string;
var
  LBuilder: TStringBuilder;
begin
  LBuilder := TStringBuilder.Create;
  try
    LBuilder.Append('[Column');
    LBuilder.Append('(');

    LBuilder.Append(QuotedStr(AColumnData.ColumnName));
    LBuilder.Append(',');
    LBuilder.Append(GetColumnProperties(AColumnData));

    if AColumnData.ColumnLength.HasValue then
      LBuilder.Append(',').Append(AColumnData.ColumnLength.Value);

    if AColumnData.ColumnPrecision.HasValue then
      LBuilder.Append(',').Append(AColumnData.ColumnPrecision.Value);

    if AColumnData.ColumnScale.HasValue then
      LBuilder.Append(',', AColumnData.ColumnScale.Value);

    if AColumnData.ColumnDescription.HasValue then
      LBuilder.Append(',').Append(AColumnData.ColumnDescription);

    LBuilder.Append(')');
    LBuilder.Append(']');

    Result := LBuilder.ToString;
  finally
    LBuilder.Free;
  end;
end;

function TDelphiUnitCodeGenerator.GetColumnProperties(AColumnData: TColumnData): string;
begin
  Result := '[';
  if AColumnData.IsRequired then
    Result := Result + 'cpRequired,';

  if AColumnData.IsUnique then
    Result := Result + 'cpUnique,';

  if AColumnData.IsPrimaryKey then
    Result := Result + 'cpPrimaryKey,';

  if AColumnData.DontInsert then
    Result := Result + 'cpDontInsert,';

  if AColumnData.DontUpdate then
    Result := Result + 'cpDontUpdate,';

  if AColumnData.NotNull then
    Result := Result + 'cpNotNull,';

  if AColumnData.IsHidden then
    Result := Result + 'cpHidden,';

  if (Result <> '') then
  begin
    SetLength(Result, Length(Result)-1);
  end;

  Result := Result + ']';
end;

function TDelphiUnitCodeGenerator.GetPrivateFieldName(AColumnData: TColumnData): string;
begin
  Result := GetFielnamePrefix + AColumnData.ColumnName;
end;

end.
